<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>随机事件与概率</title>
    <link href="/%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%A6%82%E7%8E%87/"/>
    <url>/%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%A6%82%E7%8E%87/</url>
    
    <content type="html"><![CDATA[<h2 id="知识框架"><a href="#知识框架" class="headerlink" title="知识框架"></a>知识框架</h2><p><img src="../images/%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%A6%82%E7%8E%87/%E7%9F%A5%E8%AF%86%E7%BB%93%E6%9E%841.png" alt="知识框架1"></p><p><img src="../images/%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%A6%82%E7%8E%87/%E7%9F%A5%E8%AF%86%E7%BB%93%E6%9E%842.png" alt="知识框架2"></p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="随机试验"><a href="#随机试验" class="headerlink" title="随机试验"></a>随机试验</h3><p>随机试验条件：</p><ol><li>试验可以在相同的条件下重复进行;</li><li>试验所有可能结果明确可知，且不止一个;</li><li>每一次试验会出现哪一个结果，事先并不能确定</li></ol><p>随机试验简称试验，用字母 $E_i$ 表示</p><h3 id="随机事件"><a href="#随机事件" class="headerlink" title="随机事件"></a>随机事件</h3><p>在一次试验中可能出现，也可能不出现的结果称为 <strong>随机事件</strong>，简称 <strong>事件</strong>，并用大写字母 A, B, C 等表示。将每次试验中一定发生的事件称为 <strong>必然事件</strong>，记为 $\Omega$。每次试验中一定不发生的事件称为 <strong>不可能事件</strong>，记为 ∅。</p><h3 id="样本空间"><a href="#样本空间" class="headerlink" title="样本空间"></a>样本空间</h3><p>随机试验的每一个可能结果称为<strong>样本点</strong>，记为 $\omega$。样本点的全体组成的集合称为<strong>样本空间</strong>（或<strong>基本事件空间</strong>），记为$\Omega $,即$\Omega &#x3D; {\omega}$,由一个样本点构成的事件称为<strong>基本事件</strong>.随机事件A总是由若千个基本事件组成，即A是$\Omega$的子集。</p><h3 id="事件关系与运算"><a href="#事件关系与运算" class="headerlink" title="事件关系与运算"></a>事件关系与运算</h3><p>关系：</p><ol><li>包含</li><li>相等</li><li>和（并）：至少有一个发生</li><li>积（相交）：两个同时发生</li><li>相容：$AB≠ ∅$</li><li>互斥：$AB&#x3D; ∅$</li><li>差：$A-B$ A发生而B不发生</li><li>逆：$B&#x3D;\bar{A}$</li></ol><p>&nbsp;&nbsp;&nbsp;&nbsp;完备事件组: 如果$\bigcup_{i&#x3D;1}^{n} A_i &#x3D; \Omega$(或$\bigcup_{i&#x3D;1}^{\infty} A_i &#x3D; \Omega$)且$A_i \cap A_j &#x3D; ∅set(\text{对一切 } i \neq j;i, j &#x3D; 1, 2, \dots, n(\dots)),$称有限(或可列)事件 ( A_1, A_2, \dots, A_n (\dots) ) 构成一个完备事件组。</p><p>运算：</p><ol><li><p>吸收律:<br>若 A ⊆ B, 则 A ∪ B &#x3D; B, A ∩ B &#x3D; A。</p></li><li><p>交换律:<br>A ∪ B &#x3D; B ∪ A, A ∩ B &#x3D; B ∩ A。</p></li><li><p>结合律:<br>(A ∪ B) ∪ C &#x3D; A ∪ (B ∪ C), (A ∩ B) ∩ C &#x3D; A ∩ (B ∩ C)。</p></li><li><p>分配律:<br>A ∩ (B ∪ C) &#x3D; (A ∩ B) ∪ (A ∩ C),<br>A ∪ (B ∩ C) &#x3D; (A ∪ B) ∩ (A ∪ C),<br>A ∩ (B - C) &#x3D; (A ∩ B) - (A ∩ C)。</p></li><li><p>对偶律 (德·摩根律):<br>A ∪ B &#x3D; A̅ ∩ B̅,<br>A ∩ B &#x3D; A̅ ∪ B̅。</p></li></ol><p>注：</p><ol><li>事件运算顺序约定为先进行逆运算，然后进行交运算，最后进行并或差运算。</li><li>事件的关系、运算与集合的关系、运算相当，且具有相同的运算法则，所以我们可以对比着理解记忆，并要学会用集合关系去考虑事件关系。</li></ol><h3 id="概率的定义"><a href="#概率的定义" class="headerlink" title="概率的定义"></a>概率的定义</h3><p>描述性定义：<br>&nbsp;&nbsp;&nbsp;&nbsp;通常将随机事件A发生的可能性大小的度量(非负值)称为事件A发生的概率，记为P(A)</p><p>统计性定义：<br>&nbsp;&nbsp;&nbsp;&nbsp;在相同条件下做重复试验，事件A出现的次数k和总的试验次数n之比$\frac{k}{n}$称为事件A在这n次试验中出现的频率.当试验次数n充分大时，频率将“稳定”于某常数p.”越大，频率偏离这个常数p的可能性越小.这个常数p就称为事件A的概率。</p><p>公理化定义：<br>&nbsp;&nbsp;&nbsp;&nbsp;设随机试验的样本空间为 $\Omega$，如果对每一个事件 $A$ 都有一个确定的实数 (P(A))，且事件函数 $P(\cdot)$ 满足：</p><ol><li><p>非负性：$P(A) \geq 0$；</p></li><li><p>规范性：$P(\Omega) &#x3D; 1$；</p></li><li><p>可列可加性：对于任意可列的两两互不相容事件 $A_1, A_2, \dots, A_n, \dots$（即 $A_i \cap A_j &#x3D; ∅$, $i \neq j$, $i, j &#x3D; 1, 2, \dots$），有：</p><p>$$<br>P\left( \bigcup_{i&#x3D;1}^{\infty} A_i \right) &#x3D; \sum_{i&#x3D;1}^{\infty} P(A_i),<br>$$</p></li></ol><p>则称 $P(\cdot)$ 为概率，$P(A)$ 为事件 $A$ 的概率。</p><h2 id="古典概型和几何概型"><a href="#古典概型和几何概型" class="headerlink" title="古典概型和几何概型"></a>古典概型和几何概型</h2><h3 id="古典概型"><a href="#古典概型" class="headerlink" title="古典概型"></a>古典概型</h3><p>条件：</p><ol><li>只有有限个样本点(基本事件);</li><li>每个样本点(基本事件)发生的可能性都一样。</li></ol><p>如果古典概型的基本事件总数为n，事件A包含k个基本事件，也叫作有利于A的基本事件为k个则A的概率为<br>$$<br>P(A)&#x3D;\frac{k}{n}&#x3D;\frac{\text{事件A所含基本事件的个数}}{\text{基本事件总数}}<br>$$</p><p>题目：</p><ol><li>随机分配</li><li>简单随机抽样（先后有放回，先后无放回，任取）</li></ol><h3 id="几何概型"><a href="#几何概型" class="headerlink" title="几何概型"></a>几何概型</h3><p>条件：</p><ol><li>样本空间(基本事件空间)$\Omega$是一个可度量的有界区域;</li><li>每个样本点(基本事件)发生的可能性都一样，即样本点落入$\Omega$的某一可度量的子区域S的可能性大小与S的几何度量成正比，而与S的位置及形状无关。</li></ol><p>在几何概型随机试验中，如果$S_A$是样本空间$\Omega$的一个可度量的子区域，则事件A&#x3D;{样本点落入区域$S_A$}的概率为<br>$$<br>P(A)&#x3D;\frac{S_A\text{的几何度量}}{\Omega的几何度量}<br>$$</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>古典概型与几何概型的区别:基本事件有限、等可能发生的随机试验为古典概型;基本事件无限且具有几何度量、等可能发生的随机试验为几何概型。</p><h2 id="概率的性质与公式"><a href="#概率的性质与公式" class="headerlink" title="概率的性质与公式"></a>概率的性质与公式</h2><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>有界性：对于任一事件A，有0≤P(A)≤1,且P(∅)&#x3D;0,P(2)&#x3D;1</p><blockquote><p>P(A)&#x3D;0，不能断言A&#x3D;∅;P(A)&#x3D;1，不能断言A&#x3D;$\Omega$.</p></blockquote><p>单调性：$P(B-A)&#x3D;P(B)-P(A),P(B)\geq P(A)$</p><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><ol><li>$P(A)+P(\bar{A})&#x3D;1$</li><li>$P(A\cup B)&#x3D;P(A)+P(B)-P(A\cap B)$<blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;$P(A\cup B\cup C)&#x3D;P(A)+P(B)+P(C)-P(A\cap B)-P(A\cap C)$<br>$-P(B\cap C)+P(A\cap B\cap C)$</p></blockquote></li><li>$P(A-B)&#x3D;P(A)-P(AB)&#x3D;P(A\bar{B})$</li><li>条件概率公式：$P(B|A)&#x3D;\frac{P(AB)}{P(A)}$</li><li>乘法公式：如果$P(A)&gt;0$,则$P(AB)&#x3D;P(A)P(B|A)$</li><li>全概率公式</li><li>贝叶斯公式</li></ol>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
      <category>数一</category>
      
      <category>概率论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>概率论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性表</title>
    <link href="/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <url>/%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="../images/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E7%BA%BF%E6%80%A7%E8%A1%A8%E6%80%BB.png" alt="线性表总结"></p><h2 id="线性表的定义和基本操作"><a href="#线性表的定义和基本操作" class="headerlink" title="线性表的定义和基本操作"></a>线性表的定义和基本操作</h2><h3 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;线性表是具有&#x3D;&#x3D;相同数据类型&#x3D;&#x3D;的 n (n&gt;&#x3D;0) 个数据元素的&#x3D;&#x3D;有限序列&#x3D;&#x3D;（数据之间具有前后驱关系），其中 n 为表长，当 n &#x3D; 0 时线性表是一个空表。若用 L 命名线性表，则其一般表示为</p><p>L &#x3D; (a₁, a₂, ⋯, aᵢ, aᵢ₊₁, ⋯, aₙ)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;式中，a₁ 是唯一的“第一个”数据元素，又称表头元素；aₙ 是唯一的“最后一个”数据元素，又称表尾元素。除第一个元素外，每个元素有且仅有一个直接前驱。除最后一个元素外，每个元素有且仅有一个直接后继。</p><p>特点：</p><ul><li>表中元素的个数有限。</li><li>表中元素具有逻辑上的顺序性，表中元素有其先后次序。</li><li>表中元素都是数据元素，每个元素都是单个元素。</li><li>表中元素的数据类型都相同，这意味着每个元素占有相同大小的存储空间。</li><li>表中元素具有抽象性，即仅讨论元素间的逻辑关系，而不考虑元素究竟表示什么内容。</li></ul><p>&#x3D;&#x3D;线性表是一种逻辑结构，表示元素之间一对一的相邻关系。顺序表和链表是指存储结构，两者属于不同层面的概念，因此不要将其混淆。&#x3D;&#x3D;</p><h3 id="线性表基本操作"><a href="#线性表基本操作" class="headerlink" title="线性表基本操作"></a>线性表基本操作</h3><ol><li>初始化表。构造一个空的线性表。</li><li>求表长。返回线性表工的长度，即1中数据元素的个数。</li><li>按值查找操作。在表工中查找具有给定关键字值的元素。</li><li>按位査找操作。获取表工中第i个位置的元素的值。</li><li>插入操作。在表工中的第i个位置上插入指定元素 e。</li><li>删除操作。删除表,中第i个位置的元素,并用e返回删除元素的值。</li><li>输出操作。按前后顺序输出线性表工的所有元素值。</li><li>判空操作。若为空表，则返回true，否则返回 false。</li><li>销毁操作。销毁线性表，并释放线性表工所占用的内存空间。</li></ol><p>代码实现功能</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinearList</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; list;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 1. 初始化表。构造一个空的线性表。</span><br>    <span class="hljs-built_in">LinearList</span>() &#123;&#125;<br><br>    <span class="hljs-comment">// 2. 求表长。返回线性表的长度，即数据元素的个数。</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> list.<span class="hljs-built_in">size</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 3. 按值查找操作。在表中查找具有给定关键字值的元素。</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findByValue</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            <span class="hljs-keyword">if</span> (list[i] == value) &#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">// 未找到返回 -1</span><br>    &#125;<br><br>    <span class="hljs-comment">// 4. 按位查找操作。获取表中第 i 个位置的元素的值。</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findByIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= list.<span class="hljs-built_in">size</span>()) &#123;<br>            <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">out_of_range</span>(<span class="hljs-string">&quot;Index out of range&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list[index];<br>    &#125;<br><br>    <span class="hljs-comment">// 5. 插入操作。在表中的第 i 个位置上插入指定元素 e。</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt; list.<span class="hljs-built_in">size</span>()) &#123;<br>            <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">out_of_range</span>(<span class="hljs-string">&quot;Index out of range&quot;</span>);<br>        &#125;<br>        list.<span class="hljs-built_in">insert</span>(list.<span class="hljs-built_in">begin</span>() + index, value);<br>    &#125;<br><br>    <span class="hljs-comment">// 6. 删除操作。删除表中第 i 个位置的元素，并返回删除元素的值。</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= list.<span class="hljs-built_in">size</span>()) &#123;<br>            <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">out_of_range</span>(<span class="hljs-string">&quot;Index out of range&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">int</span> value = list[index];<br>        list.<span class="hljs-built_in">erase</span>(list.<span class="hljs-built_in">begin</span>() + index);<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-comment">// 7. 输出操作。按前后顺序输出线性表的所有元素值。</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> value : list) &#123;<br>            std::cout &lt;&lt; value &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        std::cout &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-comment">// 8. 判空操作。若为空表，则返回 true，否则返回 false。</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> list.<span class="hljs-built_in">empty</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 9. 销毁操作。销毁线性表，并释放线性表所占用的内存空间。</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;<br>        list.<span class="hljs-built_in">clear</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    LinearList list;<br><br>    <span class="hljs-comment">// 初始化表</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;初始化表&quot;</span> &lt;&lt; std::endl;<br><br>    <span class="hljs-comment">// 插入操作</span><br>    list.<span class="hljs-built_in">insert</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>);<br>    list.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>, <span class="hljs-number">20</span>);<br>    list.<span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>, <span class="hljs-number">30</span>);<br>    list.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>, <span class="hljs-number">15</span>);<br><br>    <span class="hljs-comment">// 输出操作</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;表的内容: &quot;</span>;<br>    list.<span class="hljs-built_in">print</span>();<br><br>    <span class="hljs-comment">// 求表长</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;表长: &quot;</span> &lt;&lt; list.<span class="hljs-built_in">length</span>() &lt;&lt; std::endl;<br><br>    <span class="hljs-comment">// 按值查找操作</span><br>    <span class="hljs-type">int</span> index = list.<span class="hljs-built_in">findByValue</span>(<span class="hljs-number">20</span>);<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;值 20 的索引: &quot;</span> &lt;&lt; index &lt;&lt; std::endl;<br><br>    <span class="hljs-comment">// 按位查找操作</span><br>    <span class="hljs-type">int</span> value = list.<span class="hljs-built_in">findByIndex</span>(<span class="hljs-number">2</span>);<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;索引 2 的值: &quot;</span> &lt;&lt; value &lt;&lt; std::endl;<br><br>    <span class="hljs-comment">// 删除操作</span><br>    <span class="hljs-type">int</span> removedValue = list.<span class="hljs-built_in">remove</span>(<span class="hljs-number">1</span>);<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;删除的值: &quot;</span> &lt;&lt; removedValue &lt;&lt; std::endl;<br><br>    <span class="hljs-comment">// 输出操作</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;表的内容: &quot;</span>;<br>    list.<span class="hljs-built_in">print</span>();<br><br>    <span class="hljs-comment">// 判空操作</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;表是否为空: &quot;</span> &lt;&lt; (list.<span class="hljs-built_in">isEmpty</span>() ? <span class="hljs-string">&quot;是&quot;</span> : <span class="hljs-string">&quot;否&quot;</span>) &lt;&lt; std::endl;<br><br>    <span class="hljs-comment">// 销毁操作</span><br>    list.<span class="hljs-built_in">clear</span>();<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;表已销毁&quot;</span> &lt;&lt; std::endl;<br><br>    <span class="hljs-comment">// 判空操作</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;表是否为空: &quot;</span> &lt;&lt; (list.<span class="hljs-built_in">isEmpty</span>() ? <span class="hljs-string">&quot;是&quot;</span> : <span class="hljs-string">&quot;否&quot;</span>) &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线性表的顺序表示"><a href="#线性表的顺序表示" class="headerlink" title="线性表的顺序表示"></a>线性表的顺序表示</h2><h3 id="顺序表的定义"><a href="#顺序表的定义" class="headerlink" title="顺序表的定义"></a>顺序表的定义</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;线性表的顺序存储又称顺序表。它是用一组地址连续的存储单元依次存储线性表中的数据元素，从而使得逻辑上相邻的两个元素在物理位置上也相邻。第1个元素存储在顺序表的起始位置,第i个元素的存储位置后面紧接着存储的是第i+1个元素，称i为元素q在顺序表中的位序。因此，顺序表的特点是表中元素的逻辑顺序与其存储的物理顺序相同。<br>&nbsp;&nbsp;&nbsp;&nbsp;每个数据元素的存储位置都和顺序表的起始位置相差一个和该数据元素的位序成正比的常数，因此，顺序表中的任意一个数据元素都可以随机存取，所以线性表的顺序存储结构是一种随机存取的存储结构。通常用高级程序设计语言中的数组来描述线性表的顺序存储结构。</p><p>内存分配</p><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;一维数组可以是静态分配的，也可以是动态分配的。对数组进行静态分配时，因为数组的大小和空间事先已经固定，所以一旦空间占满，再加入新数据就会产生溢出，进而导致程序崩溃。<br>&nbsp;&nbsp;&nbsp;&nbsp;而在动态分配时，存储数组的空间是在程序执行过程中通过动态存储分配语句分配的，一旦数据空间占满，就另外开辟一块更大的存储空间，将原表中的元素全部拷贝到新空间，从而达到扩充数组存储空间的目的，而不需要为线性表一次性地划分所有空间。</p></blockquote><p>顺序表的优点：</p><ol><li><p>可进行随机访问,即可通过首地址和元素序号可以在 O(1)时间内找到指定的元素:</p></li><li><p>存储密度高，每个结点只存储数据元素。<br>顺序表的缺点：</p></li><li><p>元素的插入和删除需要移动大量的元素，插入操作平均需要移动 n&#x2F;2 个元素，删除操作平均需要移动(n-1)&#x2F;2个元素;</p></li><li><p>顺序存储分配需要一段连续的存储空间，不够灵活。</p></li></ol><h3 id="顺序表代码实现"><a href="#顺序表代码实现" class="headerlink" title="顺序表代码实现"></a>顺序表代码实现</h3><p>静态分配的顺序表储存结构实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 100</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> DataType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br>    DataType data[MAXSIZE];<br>    <span class="hljs-type">int</span> last;<br>&#125; Seqlist;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initseqlist</span><span class="hljs-params">(Seqlist *L)</span></span><br><span class="hljs-function"></span>&#123;<br>    L-&gt;last = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>动态分配的顺序表储存结构实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 100</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> DataType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br>    DataType *data;<span class="hljs-comment">//指示动态分配数组的指针</span><br>    <span class="hljs-type">int</span> last,size;<br>&#125; Seqlist;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initseqlist</span><span class="hljs-params">(Seqlist *L)</span></span><br><span class="hljs-function"></span>&#123;<br>    L-&gt;data = <span class="hljs-keyword">new</span> DataType[MAXSIZE];<br>    L-&gt;last = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>库文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 100</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> DataType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br>    DataType *data;<span class="hljs-comment">//指示动态分配数组的指针</span><br>    <span class="hljs-type">int</span> last,size;<br>&#125; Seqlist;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initseqlist</span><span class="hljs-params">(Seqlist *L)</span></span><br><span class="hljs-function"></span>&#123;<br>    L-&gt;data = <span class="hljs-keyword">new</span> DataType[MAXSIZE];<br>    L-&gt;last = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">input</span><span class="hljs-params">(Seqlist *L)</span></span><br><span class="hljs-function"></span>&#123;<br>    DataType x;<br>    <span class="hljs-built_in">initseqlist</span>(L);<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入顺序表中的元素，以0结束&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; x;<br>    <span class="hljs-keyword">while</span> (x)<br>    &#123;<br>        L-&gt;data[L-&gt;last++] = x;<br>        cin &gt;&gt; x;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">insert</span><span class="hljs-params">(Seqlist *L)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> pos;<br>    DataType x;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入插入位置和插入元素：&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; pos &gt;&gt; x;<br>    <span class="hljs-keyword">if</span> (pos &lt; <span class="hljs-number">0</span> || pos &gt; L-&gt;last)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;插入位置不合法&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (L-&gt;last &gt;= MAXSIZE)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;顺序表已满，无法插入&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = L-&gt;last; i &gt;= pos; i--)<br>    &#123;<br>        L-&gt;data[i] = L-&gt;data[i - <span class="hljs-number">1</span>];<br>    &#125;<br><br>    L-&gt;data[pos - <span class="hljs-number">1</span>] = x;<br><br>    L-&gt;last++;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">deletel</span><span class="hljs-params">(Seqlist *L)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> pos;<br>    DataType x;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入删除数据的位置：&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; pos;<br>    <span class="hljs-keyword">if</span> (pos &lt; <span class="hljs-number">0</span> || pos &gt; L-&gt;last)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;删除位置不合法&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (L-&gt;last &lt;= <span class="hljs-number">0</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;顺序表为空，无法删除&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = pos - <span class="hljs-number">1</span>; i &lt;= L-&gt;last - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        L-&gt;data[i] = L-&gt;data[i + <span class="hljs-number">1</span>];<br>    &#125;<br><br>    L-&gt;last--;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">lookfor</span><span class="hljs-params">(Seqlist *L)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> pos;<br>    DataType x;<br>    cout &lt;&lt; <span class="hljs-string">&quot;1. 查找元素第一次出现的位置&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;2. 查找某一位置上的元素&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入你的选择：&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-type">int</span> choice;<br>    cin &gt;&gt; choice;<br>    <span class="hljs-keyword">if</span> (choice)<br>        <span class="hljs-keyword">if</span> (choice == <span class="hljs-number">1</span>)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;请输入想要查询的元素&quot;</span> &lt;&lt; endl;<br>            cin &gt;&gt; x;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; L-&gt;last; i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (L-&gt;data[i] == x)<br>                &#123;<br>                    cout &lt;&lt; <span class="hljs-string">&quot;元素&quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot;第一次出现的位置是：&quot;</span> &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; endl;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>            cout &lt;&lt; <span class="hljs-string">&quot;元素&quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot;不存在&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (choice == <span class="hljs-number">2</span>)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;请输入想要查询的位置&quot;</span> &lt;&lt; endl;<br>            cin &gt;&gt; pos;<br>            <span class="hljs-keyword">if</span> (pos &lt; <span class="hljs-number">0</span> || pos &gt; L-&gt;last)<br>            &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;查询位置不合法&quot;</span> &lt;&lt; endl;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            cout &lt;&lt; <span class="hljs-string">&quot;位置&quot;</span> &lt;&lt; pos &lt;&lt; <span class="hljs-string">&quot;上的元素是：&quot;</span> &lt;&lt; L-&gt;data[pos - <span class="hljs-number">1</span>] &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sprit</span><span class="hljs-params">(Seqlist *L1, Seqlist *L2, Seqlist *L3)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">initseqlist</span>(L2);<br>    <span class="hljs-built_in">initseqlist</span>(L3);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; L1-&gt;last; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (L1-&gt;data[i] % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)<br>        &#123;<br>            L2-&gt;data[L2-&gt;last++] = L1-&gt;data[i];<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            L3-&gt;data[L3-&gt;last++] = L1-&gt;data[i];<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(Seqlist *L)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">if</span> (L-&gt;last == <span class="hljs-number">0</span>)<br>        cout &lt;&lt; <span class="hljs-string">&quot;顺序表为空&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; L-&gt;last; i++)<br>        &#123;<br>            cout &lt;&lt; L-&gt;data[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>            <span class="hljs-keyword">if</span> ((i + <span class="hljs-number">1</span>) % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>)<br>                cout &lt;&lt; endl;<br>        &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inputfromfile</span><span class="hljs-params">(Seqlist *L, <span class="hljs-type">char</span> *f)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">initseqlist</span>(L);<br>    FILE *fp = <span class="hljs-built_in">fopen</span>(f, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span> (fp)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">feof</span>(fp))<br>        &#123;<br>            <span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%d&quot;</span>, &amp;L-&gt;data[L-&gt;last++]);<br>        &#125;<br>        <span class="hljs-built_in">fclose</span>(fp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;seqlist.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Seqlist L1, L2, L3;<br>    <span class="hljs-built_in">input</span>(&amp;L1);<br>    <span class="hljs-built_in">print</span>(&amp;L1);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">insert</span>(&amp;L1))<br>    &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;插入成功&quot;</span>&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;插入失败&quot;</span>&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-built_in">print</span>(&amp;L1);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">deletel</span>(&amp;L1))<br>    &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;删除成功&quot;</span>&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;删除失败&quot;</span>&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-built_in">print</span>(&amp;L1);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">lookfor</span>(&amp;L1))<br>    &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;查找成功&quot;</span>&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;查找失败&quot;</span>&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-built_in">sprit</span>(&amp;L1, &amp;L2, &amp;L3);<br>    cout &lt;&lt; <span class="hljs-string">&quot;原序列为：&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">print</span>(&amp;L1);<br>    cout &lt;&lt; <span class="hljs-string">&quot;奇数序列为：&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">print</span>(&amp;L2);<br>    cout &lt;&lt; <span class="hljs-string">&quot;偶数序列为：&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">print</span>(&amp;L3);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线性表的链式表示"><a href="#线性表的链式表示" class="headerlink" title="线性表的链式表示"></a>线性表的链式表示</h2><h3 id="单链表的定义"><a href="#单链表的定义" class="headerlink" title="单链表的定义"></a>单链表的定义</h3><p>线性表的链式存储又称单链表，它是指通过一组任意的存储单元来存储线性表中的数据元素。为了建立数据元素之间的线性关系，对每个链表结点，除存放元素自身的信息之外，还需要存放一个指向其后继的指针。</p><table><thead><tr><th>data</th><th>next</th></tr></thead><tbody><tr><td>数据域</td><td>指针域</td></tr></tbody></table><p>&nbsp;&nbsp;&nbsp;&nbsp;通常用头指针$head$来标识一个单链表，指出链表的起始地址，头指针为NULL是表示一个空表。<br>&nbsp;&nbsp;&nbsp;&nbsp;头结点，在单链表第一个数据结点之前附加的一个结点，可不设任何信息，也可记录表长，带头结点时，头指针指向头结点；不带头结点时，头指针指向第一个数据结点。尾结点的指针域为NULL（用^表示）</p><p><img src="../images/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84.png" alt="单向链表结构"></p><p>为什么要引入头结点：</p><ol><li>由于第一个数据结点的位置被存放在头结点的指针域中，因此在链表的第一个位置上的操作和在表的其他位置上的操作一致，无须进行特殊处理;</li><li>无论链表是否为空,其头指针都是指向头结点的非空指针(空表中头结点的指针域为空),因此空表和非空表的处理也就得到了统一。</li></ol><h3 id="单向链表基本操作实现"><a href="#单向链表基本操作实现" class="headerlink" title="单向链表基本操作实现"></a>单向链表基本操作实现</h3><h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;双链表结点中有两个指针 prior和next，分别指向其直接前驱和直接后继，如图2.9所示。表头结点的prior域和尾结点的next域都是 NULL。</p><p><img src="../images/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="双链表示意图"></p><ol><li>插入</li><li>删除</li></ol><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><p><strong>单向循环链表</strong>：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;循环单链表和单链表的区别在于，表中最后一个结点的指针不是 NULL，而改为指向头结点,从而整个链表形成一个环。<br>&nbsp;&nbsp;&nbsp;&nbsp;在循环单链表中，表尾结点*r的 next 域指向工,故表中没有指针域为 NULL 的结点,因此,循环单链表的判空条件不是头结点的指针是否为空，而是它是否等于头指针上。</p><p><img src="../images/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%BE%AA%E7%8E%AF%E5%8D%95%E9%93%BE%E8%A1%A8%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="循环单链表示意图"></p><p><strong>循环双链表</strong>：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;由循环单链表的定义不难推出循环双链表。不同的是，在循环双链表中，头结点的prior指针还要指向表尾结点，当某结点*p为尾结点时，p-&gt;next&#x3D;&#x3D;L;当循环双链表为空表时，其头结点的prior 域和next域都等于$L$。</p><p><img src="../images/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%BE%AA%E7%8E%AF%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="循环双链表示意图"></p><h3 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;静态链表是用数组来描述线性表的链式存储结构，结点也有数据域 data 和指针域 next,与前面所讲的链表中的指针不同的是，这里的指针是结点在数组中的相对地址(数组下标)，又称游标。和顺序表一样，静态链表也要预先分配一块连续的内存空间。</p><h3 id="顺序表和链表比较"><a href="#顺序表和链表比较" class="headerlink" title="顺序表和链表比较"></a>顺序表和链表比较</h3><ol><li>顺序表可以顺序存取，也可以随机存取，链表只能从表头开始依次顺序存取。例如在第i个位置上执行存取的操作，顺序表仅需一次访问，而链表则需从表头开始依次访问i次。</li><li>采用顺序存储时，逻辑上相邻的元素，对应的物理存储位置也相邻。而采用链式存储时，逻辑上相邻的元素，物理存储位置不一定相邻，对应的逻辑关系是通过指针链接来表示的。</li><li>对于按值查找，顺序表无序时，两者的时间复杂度均为 0(n);顺表有序时，可采用折半查找,此时的时间复杂度为 O(logn)。对于按序号査找,顺序表支持随机访问,时间复杂度仅为 O(1),而链表的平均时间复杂度为 O(n)。顺序表的插入、删除操作，平均需要移动半个表长的元素。链表的插入、删除操作，只需修改相关结点的指针域即可。</li><li>顺序存储在静态存储分配情形下容易出现溢出和浪费的情况，动态存储分配虽然存储空间可以扩充，但需要移动大量元素，导致操作效率降低，而且若内存中没有更大块的连续存储空间，则会导致分配失败;链式存储的结点空间只在需要时申请分配，只要内存有空间就可以分配，操作灵活、高效，但由于链表的每个结点都带有指针域，因此存储密度不够大。</li></ol>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
      <category>408</category>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构绪论</title>
    <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA/"/>
    <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="../images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA/%E7%BB%AA%E8%AE%BA%E6%80%BB.png" alt="绪论总结"></p><h2 id="数据结构基本概念"><a href="#数据结构基本概念" class="headerlink" title="数据结构基本概念"></a>数据结构基本概念</h2><h3 id="基本概念与术语"><a href="#基本概念与术语" class="headerlink" title="基本概念与术语"></a>基本概念与术语</h3><ol><li>数据：<br>数据是信息的载体，是描述客观事物属性的数、字符及所有能输入到计算机中并被计算机程序识别和处理的符号的集合。数据是计算机程序加工的原料。</li><li>数据元素：<br>数据元素是数据的基本单位，通常作为一个整体进行考虑和处理。一个数据元素可由若干数据项组成，数据项是构成数据元素的不可分割的最小单位。例如，学生记录就是一个数据元素，它由学号、姓名、性别等数据项组成。</li><li>数据对象：<br>数据对象是具有相同性质的数据元素的集合，是数据的一个子集。</li><li>数据类型：<br>数据类型是一个值的集合和定义在此集合上的一组操作的总称，可分为其值不可再分的原子类型，其值可以再分的结构类型以及和抽象数据类型（一个数学模型及定义在该数学模型上的一组操作。它通常是对数据的某种抽象，定义了数据的取值范围及其结构形式，以及对数据操作的集合。）</li><li>数据结构：<br>数据结构是相互之间存在一种或多种特定关系的数据元素的集合，这种数据元素相互之间的关系称为结构。数据结构包括三方面的内容:逻辑结构、存储结构和数据的运算。<br>数据的逻辑结构和存储结构是密不可分的两个方面，一个算法的设计取决于所选定的逻辑结构，而算法的实现依赖于所采用的存储结构。</li></ol><h3 id="数据结构三要素"><a href="#数据结构三要素" class="headerlink" title="数据结构三要素"></a>数据结构三要素</h3><ol><li>数据逻辑结构<br>逻辑结构是指数据元素之间的逻辑关系，即从逻辑关系上描述数据。<br>数据的逻辑结构分为线性结构和非线性结构，线性表是典型的线性结构:集合、树和图是典型的非线性结构。<br><img src="../images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA/1.1%20%E6%95%B0%E6%8D%AE%E7%9A%84%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84%E5%88%86%E7%B1%BB%E5%9B%BE.png" alt="数据的逻辑结构分类图"><br>集合,结构中的数据元素之间除“同属一个集合”外，别无其他关系。<br>线性结构,结构中的数据元素之间只存在一对一的关系。<br>树形结构,结构中的数据元素之间存在一对多的关系。<br>图状结构或网状结构，结构中的数据元素之间存在多对多的关系。<br><img src="../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/1.2%E5%9B%9B%E7%B1%BB%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E5%85%B3%E7%B3%BB%E7%A4%BA%E4%BE%8B%E5%9B%BE.png" alt="四类基本关系实例图"></li><li>数据的存储结构<ul><li>顺序存储：把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。其优点是可以实现随机存取，每个元素占用最少的存储空间;缺点是只能使用相邻的一整块存储单元，因此可能产生较多的外部碎片。</li><li>链式存储：不要求逻辑上相邻的元素在物理位置上也相邻，借助指示元素存储地址的指针来表示元素之间的逻辑关系。其优点是不会出现碎片现象，能充分利用所有存储单元;缺点是每个元素因存储指针而占用额外的存储空间，且只能实现顺序存取。</li><li>索引存储：在存储元素信息的同时，还建立附加的索引表。索引表中的每项称为索引项,索引项的一般形式是(关键字，地址)。其优点是检索速度快:缺点是附加的索引表额外占用存储空间。另外，增加和删除数据时也要修改索引表，因而会花费较多的时间。</li><li>散列存储：根据元素的关键字直接计算出该元素的存储地址，又称哈希(Hash)存储。其优点是检索、增加和删除结点的操作都很快:缺点是若散列函数不好，则可能出现元素存储单元的冲突，而解决冲突会增加时间和空间开销。</li></ul></li><li>数据的运算<br>施加在数据上的运算包括运算的定义和实现。运算的定义是针对逻辑结构的，指出运算的功能;运算的实现是针对存储结构的，指出运算的具体操作步骤。</li></ol><h2 id="算法和算法评价"><a href="#算法和算法评价" class="headerlink" title="算法和算法评价"></a>算法和算法评价</h2><h3 id="算法的基本概念"><a href="#算法的基本概念" class="headerlink" title="算法的基本概念"></a>算法的基本概念</h3><ol><li>有穷性：一个算法必须总在执行有穷步之后结束，且每一步都可在有穷时间内完成。</li><li>确定性：算法中每条指令必须有确切的含义，对于相同的输入只能得出相同的输出。</li><li>可行性：算法中描述的操作都可以通过已经实现的基本运算执行有限次来实现。</li><li>输入：一个算法有零个或多个输入，这些输入取自于某个特定的对象的集合。</li><li>输出：一个算法有一个或多个输出，这些输出是与输入有着某种特定关系的量。</li></ol><h3 id="算法效率的度量"><a href="#算法效率的度量" class="headerlink" title="算法效率的度量"></a>算法效率的度量</h3><ol><li><p>时间复杂度<br>  分析某一算法的时间复杂度时，会出现浮动的时间复杂度，例如随机快排，最好情况为O(logn<em>n),最坏情况为$O(n^2)$,我们在分析其时间复杂度时需要分析的是该算法的期望，即收敛于O(logn</em>n)</p></li><li><p>空间复杂度<br>指除输入和程序之外的额外空间<br>例：空间复杂度O(1)表示执行该算法所需的辅助空间大小相比输入数据的规模来说是一个常量，而不表示该算法的执行时不需要任何的空间或辅助空间</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
      <category>408</category>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机系统概述</title>
    <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/"/>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<p>摩尔定律：当价格不变时，集成电路上可容纳的品体管数目，约每隔 18 个月便会增加一倍，性能也将提升一倍。也就是说，我们现在和 18个月后花同样的钱买到的 CPU，后者的性能是前者的两倍。这一定律揭示了信息技术进步的速度。</p><h2 id="计算机层次结构"><a href="#计算机层次结构" class="headerlink" title="计算机层次结构"></a>计算机层次结构</h2><h3 id="硬件系统"><a href="#硬件系统" class="headerlink" title="硬件系统"></a>硬件系统</h3><ol><li><p>功能部件<br>输入设备<br>输出设备<br>存储器：</p><blockquote><p>主存储器（内存储器或主存）：</p></blockquote><ul><li>CPU能够直接访问的存储器是主存储器</li><li>主存储器的工作方式是按存储单元的地址进行存取，这种存取方式称为按地址存取方式<br><img src="../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/1.1%20%E4%B8%BB%E5%AD%98%E5%82%A8%E9%80%BB%E8%BE%91%E5%9B%BE.png" alt="主存储逻辑"></li><li>存储体存放二进制信息，存储器地址寄存器(MAR)存放访存地址，经过地址译码后找到所选的存储单元。存储器数据寄存器(MDR)用于暂存要从存储器中读或写的信息，时序控制逻辑用于产生存储器操作所需的各种时序信号。</li><li>存储体由许多存储单元组成，每个存储单元包含若干存储元件，每个存储元件存储一位二进制代码“0”或“1”。因此存储单元可存储一串二进制代码，称这串代码为存储字，称这串代码的位数为存储字长，存储字长可以是 1B(8bit)或是字节的偶数倍。</li><li>MAR 用于寻址，其位数反映最多可寻址的存储单元的个数，如MAR为10 位，则最多有210&#x3D;1024 个存储单元，记为 1K。MAR 的长度与 PC 的长度相等。MDR 的位数通常等于存储字长，一般为字节的2次幂的整数倍。<blockquote><p>辅助存储器（外存储器或外存）</p></blockquote></li><li>用于帮助主存储器记忆更多的信息，辅助存储器中的信息必须调入主存储器后,才能为 CPU 所访问。</li></ul><p>运算器<br>控制器</p><blockquote><p>程序计数器（PC）<br>指令寄存器（IR）<br>控制单元（CU）</p></blockquote></li><li></li></ol><h3 id="软件系统"><a href="#软件系统" class="headerlink" title="软件系统"></a>软件系统</h3>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
      <category>408</category>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>位运算</title>
    <link href="/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <url>/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<p>基础知识回顾：</p><table><thead><tr><th></th><th>原码</th><th>补&#x2F;反码</th></tr></thead><tbody><tr><td>正数</td><td>本身</td><td>本身</td></tr><tr><td>负数</td><td>正数原码修改符号位</td><td>负数原码除符号位取反 + 1</td></tr><tr><td>8</td><td>00000000 00000000 00000000 00001000</td><td>00000000 00000000 00000000 00001000</td></tr><tr><td>-8</td><td>10000000 00000000 00000000 00001000</td><td>11111111 11111111 11111111 11111000</td></tr></tbody></table><p>得到一个相反数，全部取反再+1</p><h2 id="异或运算"><a href="#异或运算" class="headerlink" title="异或运算"></a>异或运算</h2><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ul><li>异或运算是无进位相加（1+1&#x3D;10，忽略进位，即为无进位相加）</li></ul><table><thead><tr><th></th><th>11010</th></tr></thead><tbody><tr><td>+</td><td>10110</td></tr><tr><td>&#x3D;</td><td>01100</td></tr></tbody></table><ul><li>异或运算满足交换律、结合律，也就是同一批数字，可以改变异或的顺序，最终的结果都是一样的，因为异或是一种无进位的加法，同理于正常的加法</li><li>$0 \oplus n &#x3D; n, n \oplus n &#x3D; 0, 0 \oplus 0 &#x3D; 0$</li></ul><table><thead><tr><th>n</th><th>11010</th></tr></thead><tbody><tr><td>+</td><td>00000</td></tr><tr><td>&#x3D;</td><td>11010</td></tr></tbody></table><ul><li>整体异或和如果是 $x$, 整体中某个部分的异或和如果是 $y$, 那么剩下部分的异或和是 $x \oplus y$<br>$a \oplus b &#x3D; c, a&#x3D;b \oplus c, b&#x3D;a \oplus c$</li></ul><h3 id="取球问题"><a href="#取球问题" class="headerlink" title="取球问题"></a>取球问题</h3><p>规则：<br>袋子里一共有a个白球，b个黑球<br>取两球，若为黑+白，放回一个黑球，若为2白或2黑，则重新放入一个白球</p><p>白：0  黑：1<br>取两球为异或运算，可以理解为将两个数拿出来异或后再放回去<br>所以偶数个1无进位相加为0，奇数个1无进位相加为1</p><h3 id="交换两数"><a href="#交换两数" class="headerlink" title="交换两数"></a>交换两数</h3><p>交换值，前提是a,b的数值不同，了解即可因为在数组循环等中可能会存在l&#x3D;&#x3D;r还是执行交换语句。使用这种方法会改变值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> a=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> b=<span class="hljs-number">10</span>;<br>a=a^b;<span class="hljs-comment">//a1=a^b</span><br>b=a^b;<span class="hljs-comment">//b1=a^b^b=a</span><br>a=a^b;<span class="hljs-comment">//a2=a^a^b=b</span><br></code></pre></td></tr></table></figure><h3 id="比较大值"><a href="#比较大值" class="headerlink" title="比较大值"></a>比较大值</h3><p>不会溢出分析：溢出后c的正负可能会发生改变，因此我们判断大小时的条件只用c不会溢出的情况下判断，无法确定是否溢出时不用c进行判断<br>即ab符号不同，c不会溢出，ab符号相同，c可能溢出，索引在判断returnA时只有sameAB时才会用c进行判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//必须保证n一定是0或者1</span><br><span class="hljs-comment">//0变1，1变0</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">flip</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>  <span class="hljs-keyword">return</span> n ^ <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//非负数返回1负数返回0</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sign</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>  <span class="hljs-keyword">return</span> flip(n&gt;&gt;&gt;<span class="hljs-number">31</span>);<span class="hljs-comment">//n&gt;&gt;&gt;31,右移31位，使符号位移动到0位置</span><br>&#125;<br><span class="hljs-comment">//有溢出风险的实现，c可能超出整数范围</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMax1</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>  <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a - b;<br>  <span class="hljs-type">int</span> <span class="hljs-variable">returnA</span> <span class="hljs-operator">=</span> sign(c);<span class="hljs-comment">//非负数返回1负数返回0</span><br>  <span class="hljs-type">int</span> <span class="hljs-variable">returnB</span> <span class="hljs-operator">=</span> flip(returnA);<span class="hljs-comment">//非负数返回0负数返回1,与returnA相反</span><br>  <span class="hljs-keyword">return</span> a * returnA + b * returnB;<br>&#125;<br><span class="hljs-comment">//没有任何问题的实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMax2</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>  <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a - b;<br>  <span class="hljs-type">int</span> <span class="hljs-variable">sa</span> <span class="hljs-operator">=</span> sign(a);<br>  <span class="hljs-type">int</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> sign(b);<br>  <span class="hljs-type">int</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> sign(c);<br>  <span class="hljs-type">int</span> <span class="hljs-variable">diffAB</span> <span class="hljs-operator">=</span> sa ^ sb;<span class="hljs-comment">//判断ab符号是否相同。不同为1，相同为0</span><br>  <span class="hljs-type">int</span> <span class="hljs-variable">sameAB</span> <span class="hljs-operator">=</span> flip(diffAB);<span class="hljs-comment">//不同为0，相同为1</span><br>  <span class="hljs-type">int</span> <span class="hljs-variable">returnA</span> <span class="hljs-operator">=</span> diffAB * sa + sameAB * sc;<span class="hljs-comment">//a&gt;b的条件为 ab相同c为非负，ab不同a为非负</span><br>  <span class="hljs-type">int</span> <span class="hljs-variable">returnB</span> <span class="hljs-operator">=</span> flip(returnA);<br>  <span class="hljs-keyword">return</span> a * returnA + B * returnB;<br>&#125;<br></code></pre></td></tr></table></figure><p>cpp代码实现<br>c中右移操作符&gt;&gt;，对于有符号数，右移时，符号位不变，左边补符号位，对于无符号数，右移时，左边补0<br>例如8&gt;&gt;31,则是11111111111111111111，实际值为-1，并不会只剩下符号位1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//c中右移操作符&gt;&gt;，对于有符号数，右移时，符号位不变，左边补符号位，对于无符号数，右移时，左边补0</span><br><span class="hljs-comment">//例如8&gt;&gt;31,则是11111111111111111111，实际值为-1，并不会只剩下符号位1</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">flip</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> n ^ <span class="hljs-number">1</span>; <span class="hljs-comment">// 必须保证n一定是0或者1，0变1，1变0</span><br>&#125;<br><span class="hljs-comment">// 非负数返回1负数返回0</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sign</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> !((n &gt;&gt; <span class="hljs-number">31</span>)&amp;<span class="hljs-number">1</span>); <span class="hljs-comment">// n &gt;&gt; 31, 右移31位，使符号位移动到0位置</span><br>&#125;<br><span class="hljs-comment">// 有溢出风险的实现，c可能超出整数范围</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getMax1</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> c1 = a - b;<br>    <span class="hljs-type">int</span> returnA = <span class="hljs-built_in">sign</span>(c1);       <span class="hljs-comment">// 非负数返回1负数返回0</span><br>    <span class="hljs-type">int</span> returnB = <span class="hljs-built_in">flip</span>(returnA); <span class="hljs-comment">// 非负数返回0负数返回1, 与returnA相反</span><br>    <span class="hljs-keyword">return</span> a * returnA + b * returnB;<br>&#125;<br><span class="hljs-comment">// 没有任何问题的实现</span><br><span class="hljs-comment">// 不会溢出分析：溢出后c的正负可能会发生改变，因此我们判断大小时的条件只用c不会溢出的情况下判断，无法确定是否溢出时不用c进行判断</span><br><span class="hljs-comment">// 即ab符号不同，c不会溢出，ab符号相同，c可能溢出，索引在判断returnA时只有sameAB时才会用c进行判断</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getMax2</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> c = a - b;<br>    <span class="hljs-type">int</span> sa = <span class="hljs-built_in">sign</span>(a);<br>    <span class="hljs-type">int</span> sb = <span class="hljs-built_in">sign</span>(b);<br>    <span class="hljs-type">int</span> sc = <span class="hljs-built_in">sign</span>(c);<br>    <span class="hljs-type">int</span> diffAB = sa ^ sb;                    <span class="hljs-comment">// 判断ab符号是否相同。不同为1，相同为0</span><br>    <span class="hljs-type">int</span> sameAB = <span class="hljs-built_in">flip</span>(diffAB);               <span class="hljs-comment">// 不同为0，相同为1</span><br>    <span class="hljs-type">int</span> returnA = diffAB * sa + sameAB * sc; <span class="hljs-comment">// a&gt;b的条件为 ab相同c为非负，ab不同a为非负。</span><br>    <span class="hljs-type">int</span> returnB = <span class="hljs-built_in">flip</span>(returnA);<br>    <span class="hljs-keyword">return</span> a * returnA + b * returnB;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="找出缺失的数值"><a href="#找出缺失的数值" class="headerlink" title="找出缺失的数值"></a>找出缺失的数值</h3><p>长度为n的数组，里面有0~n-1的数，现在有一个缺失的值</p><p>总异或和&#x3D;出现的异或和$\oplus$缺失值<br>缺失值&#x3D;总异或和$\oplus$出现的异或和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">missingNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span>&#123;<br>  <span class="hljs-type">int</span> <span class="hljs-variable">eorall</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,eorhas = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++)&#123;<br>    eorall ^= i;<br>    eorhas ^=nums[i];<br>  &#125;<br>  eorall ^=nums.length;<br>  <span class="hljs-keyword">return</span> eorall ^ eorhas;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="找出出现奇数次的值"><a href="#找出出现奇数次的值" class="headerlink" title="找出出现奇数次的值"></a>找出出现奇数次的值</h3><p>数组中1种数出现了奇数次，其他的数都出现了偶数次，返回出现了奇数次的数<br>依次异或过去，出现两次的数异或为0，只剩下那一个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">singleNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span>&#123;<br>  <span class="hljs-type">int</span> <span class="hljs-variable">eor</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> num : nums)&#123;<br>    eor ^= num;<br>  &#125;<br>  <span class="hljs-keyword">return</span> eor;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="返回两个奇数次数"><a href="#返回两个奇数次数" class="headerlink" title="返回两个奇数次数"></a>返回两个奇数次数</h3><p>数组中有2种数出现了奇数次，其他的数都出现了偶数次，返回这两种出现了奇数次的数</p><p><strong>Brian Kernighan算法</strong> - 一个数&amp;它的相反数可以得到二进制状态中最右侧的1为1，其他为0的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] singNumber(<span class="hljs-type">int</span>[] nums)&#123;<br>  <span class="hljs-type">int</span> <span class="hljs-variable">eor1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums)&#123;<br>    eor1 ^= num;<br>  &#125;<br>  <span class="hljs-comment">//eor1=a^b,a!=b，则eor至少有一位是1</span><br>  <span class="hljs-type">int</span> <span class="hljs-variable">rightOne</span> <span class="hljs-operator">=</span> eor1 &amp; (-eor1);<span class="hljs-comment">//最右侧的1位1为1，其他为0</span><br>  <span class="hljs-type">int</span> <span class="hljs-variable">eor2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums)&#123;<br>    <span class="hljs-keyword">if</span>((num &amp; rightOne) == <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//找出eor最右侧1位置为0的数，全部异或和必为其中一个数</span><br>      eor2 ^= num;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123; eor2, eor1 ^ eor2&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="返回多个数"><a href="#返回多个数" class="headerlink" title="返回多个数"></a>返回多个数</h3><p>数组中只有1种数出现次数少于m次，其他数都出现了m次，返回出现次数小于m次的那种数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> m)</span>&#123;<br>  <span class="hljs-type">int</span>[] cnts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">32</span>];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : arr)&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++)&#123;<br>      cnts[i] +=(num &gt;&gt; i) &amp; <span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++)&#123;<br>    <span class="hljs-keyword">if</span> (cnts[i] % m != <span class="hljs-number">0</span>)&#123;<br>      ans ^= <span class="hljs-number">1</span> &lt;&lt; i;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="判断整数是否为2的幂"><a href="#判断整数是否为2的幂" class="headerlink" title="判断整数是否为2的幂"></a>判断整数是否为2的幂</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;2的幂次在二进制中只有一个1，所以我们可以通过Brian Kernighan算法得到最右侧为1的数与原数比较是否相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPowerOfTwo</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">return</span> n &gt; <span class="hljs-number">0</span> &amp;&amp; (n &amp; (n - <span class="hljs-number">1</span>)) == <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="判断整数是否为3的幂"><a href="#判断整数是否为3的幂" class="headerlink" title="判断整数是否为3的幂"></a>判断整数是否为3的幂</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPowerOfThree</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">return</span> n &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-number">1162261467</span>%n == <span class="hljs-number">0</span>;<span class="hljs-comment">//1162261467是int范围内最大的3的幂</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="求解大于等于n的最小的2次幂"><a href="#求解大于等于n的最小的2次幂" class="headerlink" title="求解大于等于n的最小的2次幂"></a>求解大于等于n的最小的2次幂</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">near2power</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    n--;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">2</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">4</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">8</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">16</span>;<span class="hljs-comment">//这里是32位系统，如果是64位系统，就是直到n |= n &gt;&gt;&gt; 32;该实现的是将最左边的1后面的所有位都置为1</span><br>    <span class="hljs-keyword">return</span> n + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="../images/%E4%BD%8D%E8%BF%90%E7%AE%97/%E6%B1%82%E8%A7%A3%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8En%E7%9A%84%E6%9C%80%E5%B0%8F%E7%9A%842%E6%AC%A1%E5%B9%82.png" alt="代码详细例子理解"></p><h3 id="区间-left，right-内所有数字-的结果"><a href="#区间-left，right-内所有数字-的结果" class="headerlink" title="区间[left，right]内所有数字&amp;的结果"></a>区间[left，right]内所有数字&amp;的结果</h3><h3 id="逆序二进制状态"><a href="#逆序二进制状态" class="headerlink" title="逆序二进制状态"></a>逆序二进制状态</h3><h3 id="二进制中有几个1"><a href="#二进制中有几个1" class="headerlink" title="二进制中有几个1"></a>二进制中有几个1</h3>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
      <category>408</category>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue</title>
    <link href="/vue/"/>
    <url>/vue/</url>
    
    <content type="html"><![CDATA[<h2 id="基础内容"><a href="#基础内容" class="headerlink" title="基础内容"></a>基础内容</h2><h3 id="文本插值"><a href="#文本插值" class="headerlink" title="文本插值"></a>文本插值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>// 这是 JavaScript 部分的注释<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      msg: &#x27;Hello Vue!&#x27;,<br>      hello: &#x27;Hello World!&#x27;,<br>      number: 100,<br>      flag: 1,<br>      rawhtml: &#x27;&lt;span style=&quot;color:red&quot;&gt;我是红色的&lt;/span&gt;&#x27;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;h3&gt;文本插值&lt;/h3&gt;<br>  &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;<br>  &lt;p&gt;&#123;&#123; hello.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;&lt;/p&gt;<br>  &lt;p&gt;&#123;&#123; number+1 &#125;&#125;&lt;/p&gt;<br>  &lt;p&gt;&#123;&#123; flag ?&#x27;YES&#x27;:&#x27;NO&#x27; &#125;&#125;&lt;/p&gt;<br>  &lt;p&gt;&#123;&#123; rawhtml &#125;&#125;&lt;/p&gt;<br>  &lt;p v-html=&quot;rawhtml&quot;&gt;&lt;/p&gt;<br>  &lt;!--无效语句 --&gt;<br>  &lt;!-- &lt;p&gt;&#123;&#123; var a = 1 &#125;&#125;&lt;/p&gt; --&gt;<br>  &lt;!-- &#123;&#123; if(ok)&#123;return 1&#125; &#125;&#125; --&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>// 这是 JavaScript 部分的注释<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      msg: &quot;active&quot;,<br>      vid: &quot;appID&quot;,<br>      isbuttondisabled: true,<br>      objectofattros: &#123;<br>        dynamicclass: &quot;appclass&quot;,<br>        dynamicid: &quot;appID&quot;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;h3&gt;属性绑定&lt;/h3&gt;<br>  &lt;p v-bind:id=&quot;vid&quot; v-bind:class=&quot;msg&quot;&gt;绑定属性&lt;/p&gt;<br>  &lt;p :id=&quot;vid&quot; :class=&quot;msg&quot;&gt;绑定属性&lt;/p&gt;<br>  &lt;button :disabled=&quot;isbuttondisabled&quot;&gt;button&lt;/button&gt;<br>  &lt;p v-bind=&quot;objectofattros&quot;&gt;绑定对象&lt;/p&gt;<br>  &lt;!--无效语句 --&gt;<br>  &lt;!-- &lt;p&gt;&#123;&#123; var a = 1 &#125;&#125;&lt;/p&gt; --&gt;<br>  &lt;!-- &#123;&#123; if(ok)&#123;return 1&#125; &#125;&#125; --&gt;<br>&lt;/template&gt;<br><br>&lt;style&gt;<br>.active &#123;<br>  color: red;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>    data() &#123;<br>        return &#123;<br>            flag: true,<br>            type: &#x27;B&#x27;<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>&lt;h3&gt;条件渲染&lt;/h3&gt;<br>&lt;div v-if=&quot;flag&quot;&gt;你抓不住我&lt;/div&gt;<br>&lt;div v-else&gt;我是山里灵活的狗&lt;/div&gt;<br>&lt;div v-show=&quot;flag&quot;&gt;我是山里灵活的狗&lt;/div&gt;<br>&lt;!-- 频繁切换用show，少量切换有多种情况用if --&gt;<br>&lt;div v-if=&quot;type === &#x27;A&#x27;&quot;&gt;我是A&lt;/div&gt;<br>&lt;div v-else-if=&quot;type === &#x27;B&#x27;&quot;&gt;我是B&lt;/div&gt;<br>&lt;div v-else-if=&quot;type === &#x27;C&#x27;&quot;&gt;我是C&lt;/div&gt;<br>&lt;div v-else&gt;我是D&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>    data() &#123;<br>        return &#123;<br>            names: [&#x27;张三&#x27;, &#x27;李四&#x27;, &#x27;王五&#x27;],<br>            user: &#123;<br>                name: &#x27;张三&#x27;,<br>                age: 18<br>            &#125;,<br>            person: [&#123;<br>                id:1,<br>                name: &#x27;张三&#x27;,<br>                age: 70<br>            &#125;,<br>                &#123;<br>                id:2,<br>                name: &#x27;李四&#x27;,<br>                age: 80<br>            &#125;,<br>                &#123;<br>                id:3,<br>                name: &#x27;王五&#x27;,<br>                age: 9<br>            &#125;]<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>&lt;h3&gt;列表渲染+通过key管理状态&lt;/h3&gt;<br>&lt;!-- 其中in可以用of代替 --&gt;<br>&lt;!-- &lt;p v-for=&quot;a in names&quot;&gt;&#123;&#123; a &#125;&#125;&lt;/p&gt; --&gt;<br>&lt;p v-for=&quot;(x,i) in names&quot;&gt;&#123;&#123; x &#125;&#125;:&#123;&#123; i &#125;&#125;&lt;/p&gt;<br>&lt;p v-for=&quot;(x,i) in names&quot; :key=&quot;i&quot;&gt;&#123;&#123; x &#125;&#125;&lt;/p&gt;<br>&lt;!-- 此处key使用了v-bind来绑定 --&gt;<br>&lt;p v-for=&quot;(value,k,index) in user&quot;&gt;&#123;&#123; value &#125;&#125;-&#123;&#123; k &#125;&#125;-&#123;&#123; index &#125;&#125;&lt;/p&gt;<br>&lt;div v-for=&quot;item of person&quot; :key=&quot;item.id&quot;&gt;<br>    &lt;p&gt;&#123;&#123; item.name &#125;&#125;-&#123;&#123; item.age &#125;&#125;&lt;/p&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;h3&gt;内联事件处理器&lt;/h3&gt;<br>    &lt;button v-on:click=&quot;count1++&quot;&gt;add&lt;/button&gt;<br>    &lt;!-- v-on:click=&quot;count++&quot; 等价于 @click=&quot;count++&quot; --&gt;<br>    &lt;p&gt;&#123;&#123; count1 &#125;&#125;&lt;/p&gt;<br><br>    &lt;h3&gt;方法事件处理器&lt;/h3&gt;<br>    &lt;button @click=&quot;add&quot;&gt;add&lt;/button&gt;<br>    &lt;p&gt;&#123;&#123; count2 &#125;&#125;&lt;/p&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><br><br>export default &#123;<br>    data() &#123;<br>        return &#123;<br>            count1: 0,<br>            count2: 0<br>        &#125;<br>    &#125;,<br>    methods: &#123;<br>        add() &#123;<br>            console.log(&#x27;add&#x27;)<br>            // 这个是控制台输出的<br>            this.count2++<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="事件传参"><a href="#事件传参" class="headerlink" title="事件传参"></a>事件传参</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;h3&gt;事件传参&lt;/h3&gt;<br>    &lt;button @click=&quot;addcount&quot;&gt;add&lt;/button&gt;<br>    &lt;p&gt;count1 is :&#123;&#123; count1 &#125;&#125;&lt;/p&gt;<br>    &lt;button @click=&quot;add(&#x27;hello&#x27;)&quot;&gt;add&lt;/button&gt;<br>    &lt;p&gt;count2 is :&#123;&#123; count2 &#125;&#125;&lt;/p&gt;<br>    &lt;p @click=&quot;getname(name,$event)&quot; v-for=&quot;(name,i) of names&quot; :key=&quot;index&quot;&gt;&#123;&#123; name &#125;&#125;&lt;/p&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><br><br>export default &#123;<br>    data() &#123;<br>        return &#123;<br>            count1: 0,<br>            count2: 0,<br>            names:[&#x27;张三&#x27;,&#x27;李四&#x27;,&#x27;王五&#x27;]<br>        &#125;<br>    &#125;,<br>    methods: &#123;<br>        addcount(e) &#123;<br>            //js中的事件对象event<br>            this.count1++;<br>            e.target.innerHTML = &#x27;add&#x27; + this.count1;<br>            console.log(e.target);<br>        &#125;,<br>        add(msg) &#123;<br>            console.log(msg);<br>            this.count2++;<br>        &#125;,<br>        getname(name,e)&#123;<br>            console.log(name);<br>            console.log(e);<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="事件修饰"><a href="#事件修饰" class="headerlink" title="事件修饰"></a>事件修饰</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;h3&gt;事件修饰符&lt;/h3&gt;<br>    &lt;a @click=&quot;clickblog&quot; href=&quot;https://2819461143wp.github.io/&quot;&gt;blog&lt;/a&gt;<br>    &lt;div @click=&quot;clickdiv&quot;&gt;<br>        &lt;p @click.stop=&quot;clickp&quot;&gt;测试冒泡&lt;/p&gt;<br>        &lt;!-- 只会执行p的事件 --&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>export default &#123;<br>    data() &#123;<br>        return &#123;<br>        &#125;<br>    &#125;,<br>    methods: &#123;<br>        clickblog(e) &#123;<br>            e.preventDefault();<br>            //阻止默认事件<br>            console.log(&#x27;click blog&#x27;);<br>        &#125;,<br>        clickdiv() &#123;<br>            console.log(&#x27;click div&#x27;);<br>        &#125;,<br>        clickp(e) &#123;<br>            //e.stopPropagation();<br>            console.log(&#x27;click p&#x27;);<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
      <category>language</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>language</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>堆及堆排序</title>
    <link href="/%E5%A0%86%E5%8F%8A%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    <url>/%E5%A0%86%E5%8F%8A%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="堆结构-优先级队列"><a href="#堆结构-优先级队列" class="headerlink" title="堆结构,优先级队列"></a>堆结构,优先级队列</h2><p><img src="../images/%E5%A0%86/%E6%95%B0%E7%BB%84%E5%89%8D%E7%BC%80%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E5%85%AC%E5%BC%8F.png" alt="数组前缀完全二叉树公式"></p><p>大根堆（最大堆）是一种特殊的二叉树结构，它满足以下两个条件：</p><ul><li>完全二叉树：大根堆是一棵完全二叉树，即除了最后一层外，每一层的节点都是满的，并且最后一层的节点从左到右依次排列。</li><li>堆序性质：大根堆中每个节点的值都大于或等于其子节点的值。换句话说，根节点是整个堆中的最大值。</li></ul><h3 id="调整代码"><a href="#调整代码" class="headerlink" title="调整代码"></a>调整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//新加入大根堆堆尾的数据向上调整</span><br><span class="hljs-comment">//从上往下构造大根堆</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapInsert1</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">while</span> (arr[i] &gt; arr[(i-<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>])&#123;<br>        swap(aar, i, (i_1)/<span class="hljs-number">2</span>)<br>        i = (i-<span class="hljs-number">1</span>)/<span class="hljs-number">2</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//从底往上构造大根堆，新的数往下对比</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapInsert2</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">while</span> ((arr[i] &lt; arr[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] || arr[i] &lt; arr[i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>]&amp;&amp;(arr.length&gt;i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>||arr.length&gt;i*<span class="hljs-number">2</span>+<span class="hljs-number">2</span>)))&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">best</span> <span class="hljs-operator">=</span> i;<br>        <span class="hljs-keyword">if</span> (arr[i * <span class="hljs-number">2</span> +<span class="hljs-number">1</span>] &lt; arr[i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>])&#123;<br>            best = i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            best = i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>        &#125;<br>        swap(arr, i, best);<br>        i = best;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//往下调整,大根堆中i位置数值变了</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapify</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> size)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> i * <span class="hljs-number">2</span> +<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (l &lt; size)&#123;<br>        <span class="hljs-type">int</span> best;<br>        <span class="hljs-keyword">if</span>(l + <span class="hljs-number">1</span> &lt; size &amp;&amp; arr[l + <span class="hljs-number">1</span>] &gt; arr[l])&#123;<br>            best = l + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            best = l;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (arr[best] &lt; arr[i])&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        swap(arr, best, i);<br>        i = best;<br>        l = i * <span class="hljs-number">2</span> +<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapSort1</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> arr.length;<br>    <span class="hljs-comment">// 从上往下构造大根堆</span><br>    <span class="hljs-comment">//log1+log2+...+logn 收敛于O(n*logn)</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; n;i++)&#123;<br>        heapInsert1(arr, i);<br>    &#125;<br>    <span class="hljs-comment">// 从下往上构造大根堆</span><br>    <span class="hljs-comment">// for (int i = n-1; i &gt;= 0; i--)&#123;</span><br>    <span class="hljs-comment">//     heapInsert2(arr, i);</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> n;<br>    <span class="hljs-comment">//调整过程O(n*logn)</span><br>    <span class="hljs-keyword">while</span> (size &gt; <span class="hljs-number">1</span>)&#123;<br>        swap(arr, <span class="hljs-number">0</span>, --size);<br>        heapify(arr, <span class="hljs-number">0</span> ,size);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>cpp实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a, <span class="hljs-type">int</span> &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> temp = a;<br>    a = b;<br>    b = temp;<br>&#125;<br><br><span class="hljs-comment">// 新加入大根堆堆尾的数据向上调整</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapInsert1</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (arr[i] &gt; arr[(i - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>])<br>    &#123;<br>        <span class="hljs-built_in">swap</span>(arr[i], arr[(i - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>]);<br>        i = (i - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 从底往上构造大根堆，新入堆的值向下对比</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapInsert2</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> ((arr[i] &lt; arr[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] || arr[i] &lt; arr[i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>]) &amp;&amp; (i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt; n &amp;&amp; i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span> &lt; n))<br>    &#123;<br>        <span class="hljs-type">int</span> best = i;<br>        <span class="hljs-keyword">if</span> (arr[i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>] &lt; arr[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>])<br>        &#123;<br>            best = i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            best = i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-built_in">swap</span>(arr[i], arr[best]);<br>        i = best;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 向下调整，大根堆中i位置数值变了</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapify</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> largest = i;       <span class="hljs-comment">// 初始化 largest 为根节点</span><br>    <span class="hljs-type">int</span> left = <span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 左子节点</span><br>    <span class="hljs-type">int</span> right = <span class="hljs-number">2</span> * i + <span class="hljs-number">2</span>; <span class="hljs-comment">// 右子节点</span><br><br>    <span class="hljs-comment">// 如果左子节点大于根节点</span><br>    <span class="hljs-keyword">if</span> (left &lt; n &amp;&amp; arr[left] &gt; arr[largest])<br>        largest = left;<br><br>    <span class="hljs-comment">// 如果右子节点大于 largest</span><br>    <span class="hljs-keyword">if</span> (right &lt; n &amp;&amp; arr[right] &gt; arr[largest])<br>        largest = right;<br><br>    <span class="hljs-comment">// 如果 largest 不是根节点</span><br>    <span class="hljs-keyword">if</span> (largest != i)<br>    &#123;<br>        <span class="hljs-built_in">swap</span>(arr[i], arr[largest]);<br><br>        <span class="hljs-comment">// 递归地对受影响的子树进行 heapify</span><br>        <span class="hljs-built_in">heapify</span>(arr, n, largest);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapsort1</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">heapInsert1</span>(arr, i);<br>    &#125;<br>    <span class="hljs-type">int</span> size = n;<br>    <span class="hljs-keyword">while</span> (size &gt; <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">swap</span>(arr[<span class="hljs-number">0</span>], arr[--size]);<br>        <span class="hljs-built_in">heapify</span>(arr, size, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapsort2</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-built_in">heapInsert2</span>(arr, i, n);<br>    &#125;<br>    <span class="hljs-type">int</span> size = n;<br>    <span class="hljs-keyword">while</span> (size &gt; <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">swap</span>(arr[<span class="hljs-number">0</span>], arr[--size]);<br>        <span class="hljs-built_in">heapify</span>(arr, size, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> arr1[n], arr2[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cin &gt;&gt; arr1[i];<br>        arr2[i] = arr1[i];<br>    &#125;<br>    <span class="hljs-built_in">heapsort1</span>(arr1, n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cout &lt;&lt; arr1[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-built_in">heapsort2</span>(arr2, n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cout &lt;&lt; arr2[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="比较器定制"><a href="#比较器定制" class="headerlink" title="比较器定制"></a>比较器定制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> company;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(<span class="hljs-type">int</span> c, <span class="hljs-type">int</span> a)</span>&#123;<br>        company = c;<br>        age = a;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> EmployeeComparator <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;Employee&gt;&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Employee <span class="hljs-number">01</span>, Employee o2)</span>&#123;<br>        <span class="hljs-comment">//返回正数o1优先级高，返回负数o2优先级高，优先级一致返回0</span><br>        <span class="hljs-keyword">return</span> o1.age - o2.age;<br>    &#125;<br>&#125;<br><br>Employee []arr=&#123;&#125;;<br>Array.sort(arr,<span class="hljs-keyword">new</span> <span class="hljs-title class_">EmployeeComparator</span>());<br>Array.sort(arr,(a,b)-&gt;b.age-a.age);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
      <category>408</category>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
      <tag>堆</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重要排序算法</title>
    <link href="/%E9%87%8D%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/%E9%87%8D%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="../images/%E9%87%8D%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E6%80%BB%E7%BB%93.png" alt="总结"></p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h3 id="递归与master公式"><a href="#递归与master公式" class="headerlink" title="递归与master公式"></a>递归与master公式</h3><p><img src="../images/%E9%87%8D%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E7%90%86%E8%A7%A3%E4%B8%8Emaster%E5%85%AC%E5%BC%8F.png" alt="递归理解与master公式"></p><h3 id="递归寻找最大值"><a href="#递归寻找最大值" class="headerlink" title="递归寻找最大值"></a>递归寻找最大值</h3><p><img src="../images/%E9%87%8D%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E5%AF%BB%E6%89%BE%E6%9C%80%E5%A4%A7%E5%80%BC.png" alt="递归寻找最大值"></p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并分治思想：将一个问题尝试分为若干个类似问题，解决单个问题后再解决合一起的问题</p><p>例：整体有序&#x3D;左有序+右有序+合起来有序</p><h3 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h3><p>递归实现</p><p>java代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">501</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[MAXN];<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] help = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[MAXN];<br><span class="hljs-comment">//T(n)=2*T(n/2)+O(n)</span><br><span class="hljs-comment">//master可得时间复杂度为O(n*log(n))</span><br><span class="hljs-comment">//空间复杂度为O(n)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mergeSort1</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-keyword">if</span>(l == r)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (l+r)/<span class="hljs-number">2</span>;<br>    mergeSort1(l,m);<br>    mergeSort1(m+<span class="hljs-number">1</span>,r);<br>    merge(l,m,r);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> m,<span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> l;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> l;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span>m+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (a &lt;=m &amp;&amp; b &lt;= r)&#123;<br>        <span class="hljs-keyword">if</span>(arr[a] &lt;= arr[b])&#123;<br>            help[i++] = arr[a++];<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            help[i++] = arr[b++];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (a &lt;= m)&#123;<br>        help[i++] = arr[a++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (b &lt;=r )&#123;<br>        help[i++] = arr[b++];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = l; i &lt;= r; i++)&#123;<br>        arr&#123;i&#125; = help[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>cpp代码实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; arr;<br>vector&lt;<span class="hljs-type">int</span>&gt; help;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = l, j = m + <span class="hljs-number">1</span>, k = l;<br>    <span class="hljs-keyword">while</span> (i &lt;= m &amp;&amp; j &lt;= r)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (arr[i] &lt;= arr[j])<br>        &#123;<br>            help[k++] = arr[i++];<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            help[k++] = arr[j++];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (i &lt;= m)<br>    &#123;<br>        help[k++] = arr[i++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (j &lt;= r)<br>    &#123;<br>        help[k++] = arr[j++];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++)<br>    &#123;<br>        arr[i] = help[i];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mergesort</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l == r)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">mergesort</span>(l, m);<br>    <span class="hljs-built_in">mergesort</span>(m + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-built_in">merge</span>(l, m, r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    arr.<span class="hljs-built_in">resize</span>(n);<br>    help.<span class="hljs-built_in">resize</span>(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cin &gt;&gt; arr[i];<br>    &#125;<br>    <span class="hljs-built_in">mergesort</span>(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cout &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>非递归实现</p><p>java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">501</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[MAXN];<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] help = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[MAXN];<br><span class="hljs-comment">//时间复杂度为O(n*log(n))</span><br><span class="hljs-comment">//空间复杂度为O(n)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mergeSort2</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l, m, r, step = <span class="hljs-number">1</span>; step &lt; n; step &lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>        l = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(l &lt; n)&#123;<br>            m = l + step -<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (m + <span class="hljs-number">1</span> &gt;= n)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            r = Math.min(l + (step &lt;&lt; <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>);<br>            merge(l, m, r);<br>            l = r + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> m,<span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> l;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> l;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span>m+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (a &lt;=m &amp;&amp; b &lt;= r)&#123;<br>        <span class="hljs-keyword">if</span>(arr[a] &lt;= arr[b])&#123;<br>            help[i++] = arr[a++];<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            help[i++] = arr[b++];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (a &lt;= m)&#123;<br>        help[i++] = arr[a++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (b &lt;=r )&#123;<br>        help[i++] = arr[b++];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = l; i &lt;= r; i++)&#123;<br>        arr&#123;i&#125; = help[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>cpp代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; arr;<br>vector&lt;<span class="hljs-type">int</span>&gt; help;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = l, a = l, b = m + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (a &lt;= m &amp;&amp; b &lt;= r)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (arr[a] &gt; arr[b])<br>        &#123;<br>            help[i++] = arr[b++];<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            help[i++] = arr[a++];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (a &lt;= m)<br>    &#123;<br>        help[i++] = arr[a++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (b &lt;= r)<br>    &#123;<br>        help[i++] = arr[b++];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = l; j &lt;= r; j++)<br>    &#123;<br>        arr[j] = help[j];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mergesort</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> a, m, b, step = <span class="hljs-number">1</span>; step &lt;= r - l; step &lt;&lt;= <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (a = l; a + step &lt;= r; a += step &lt;&lt; <span class="hljs-number">1</span>)<br>        &#123;<br>            m = a + step - <span class="hljs-number">1</span>;<br>            b = <span class="hljs-built_in">min</span>(a + (step &lt;&lt; <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>, r);<br>            <span class="hljs-built_in">merge</span>(a, m, b);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    arr.<span class="hljs-built_in">resize</span>(n);<br>    help.<span class="hljs-built_in">resize</span>(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cin &gt;&gt; arr[i];<br>    &#125;<br>    <span class="hljs-built_in">mergesort</span>(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cout &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="归并分治"><a href="#归并分治" class="headerlink" title="归并分治"></a>归并分治</h3><p>求数组小和问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">501</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[MAXN];<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] help = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[MAXN];<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">smallSum</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-keyword">if</span>(l == r)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (l+r) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">return</span> smallSum(l, m)+smallSum(m+<span class="hljs-number">1</span>, r) + merge(l, m, r);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> m+<span class="hljs-number">1</span>, i = l, sum = <span class="hljs-number">0</span>;j &lt;= r; j++)&#123;<br>        <span class="hljs-keyword">while</span> (i &lt;= m &amp;&amp; arr[i] &lt; arr[j])&#123;<br>            sum += arr[i++];<br>        &#125;<br>        ans += sum;<br>    &#125;<span class="hljs-comment">//可将这一部分加到左右两端比较大小放入辅助数组那里</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> l;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> l;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span>m+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (a &lt;=m &amp;&amp; b &lt;= r)&#123;<br>        <span class="hljs-keyword">if</span>(arr[a] &lt;= arr[b])&#123;<br>            help[i++] = arr[a++];<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            help[i++] = arr[b++];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (a &lt;= m)&#123;<br>        help[i++] = arr[a++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (b &lt;= r)&#123;<br>        help[i++] = arr[b++];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = l; i &lt;= r; i++)&#123;<br>        arr&#123;i&#125; = help[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 归并排序的一部分，同时计算小和</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> temp[], <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> mid, <span class="hljs-type">int</span> right)</span> </span>&#123;<br>    <span class="hljs-type">int</span> i = left, j = mid + <span class="hljs-number">1</span>, k = left;<br>    <span class="hljs-type">int</span> smallSum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;<br>        <span class="hljs-keyword">if</span> (arr[i] &lt; arr[j]) &#123;<br>            <span class="hljs-comment">// 当左侧元素小于右侧元素时，计算小和</span><br>            smallSum += (arr[i] * (right - j + <span class="hljs-number">1</span>));<br>            temp[k++] = arr[i++];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            temp[k++] = arr[j++];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid) &#123;<br>        temp[k++] = arr[i++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (j &lt;= right) &#123;<br>        temp[k++] = arr[j++];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = left; i &lt;= right; i++) &#123;<br>        arr[i] = temp[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> smallSum;<br>&#125;<br><br><span class="hljs-comment">// 使用归并排序的方法计算小和</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mergeSortAndCount</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> temp[], <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> </span>&#123;<br>    <span class="hljs-type">int</span> mid, smallSum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (right &gt; left) &#123;<br>        mid = (right + left) / <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">// 分治法：先处理左半部分，再处理右半部分</span><br>        smallSum += <span class="hljs-built_in">mergeSortAndCount</span>(arr, temp, left, mid);<br>        smallSum += <span class="hljs-built_in">mergeSortAndCount</span>(arr, temp, mid + <span class="hljs-number">1</span>, right);<br>        <span class="hljs-comment">// 合并两个有序部分，并计算小和</span><br>        smallSum += <span class="hljs-built_in">merge</span>(arr, temp, left, mid, right);<br>    &#125;<br>    <span class="hljs-keyword">return</span> smallSum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> arr[n];<br>    <span class="hljs-type">int</span> temp[n]; <span class="hljs-comment">// 用于归并排序的临时数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cin &gt;&gt; arr[i];<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;数组小和为: &quot;</span> &lt;&lt; <span class="hljs-built_in">mergeSortAndCount</span>(arr, temp, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>反转对数列</p><h2 id="随机快速排序"><a href="#随机快速排序" class="headerlink" title="随机快速排序"></a>随机快速排序</h2><h3 id="随机快速排序经典过程-不推荐"><a href="#随机快速排序经典过程-不推荐" class="headerlink" title="随机快速排序经典过程(不推荐)"></a>随机快速排序经典过程(不推荐)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort1</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-keyword">if</span>(l &gt;= r)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> arr[l+(<span class="hljs-type">int</span>)(Math.random()*(r-l+<span class="hljs-number">1</span>))];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> partition1(l, r, x);<br>    quickSort1(l,mid-<span class="hljs-number">1</span>);<br>    quickSort1(mid+<span class="hljs-number">1</span>, r);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">partition1</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> l, xi =<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> l; i &lt;= r; i++)&#123;<br>        <span class="hljs-keyword">if</span>(arr[i] &lt;= x)&#123;<br>            swap(a, i);<span class="hljs-comment">//交换两个索引的值</span><br>            <span class="hljs-keyword">if</span> (arr[a] == x)&#123;<br>                xi = a;<span class="hljs-comment">//记录最后一个等于划分值的索引</span><br>            &#125;<br>            a++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//l,....,x,.....a-1,a,...</span><br>    <span class="hljs-comment">//l~a-1 &lt;=x   a~r &gt;x</span><br>    swap(xi, a - <span class="hljs-number">1</span>);<span class="hljs-comment">//将该值换到中间a-1去</span><br>    <span class="hljs-keyword">return</span> a - <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="荷兰国旗划分问题"><a href="#荷兰国旗划分问题" class="headerlink" title="荷兰国旗划分问题"></a>荷兰国旗划分问题</h3><p>有两种实现思想:</p><ul><li>一种的以随机位置作为基准值来比较</li><li>另一种以固定位置即0索引的位置为基准值，其随机性体现为，生成随机索引然后将其值与零索引的值交换来进行比较</li></ul><p>java代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//期望的时间复杂度为O(n*logn),空间复杂度为O(logn)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort2</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-keyword">if</span>(l &gt;= r)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> arr[l+(<span class="hljs-type">int</span>)(Math.random()*(r-l+<span class="hljs-number">1</span>))];<br>    partition2(l, r, x);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> a;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> b;<br>    quickSort2(l, left-<span class="hljs-number">1</span>);<br>    quickSort2(right+<span class="hljs-number">1</span> ,r);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> a, b;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">partition2</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> l, b = r, i = l;<br>    <span class="hljs-keyword">while</span>(i &lt;= b)&#123;<br>        <span class="hljs-keyword">if</span>(arr[i] &lt;= x)&#123;<br>            swap(a,i);<br>            a++;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[i] == x)&#123;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            swap(i, b);<br>            b--;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第一种<br>cpp代码实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctime&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; arr;<br><span class="hljs-type">int</span> a, b;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a, <span class="hljs-type">int</span> &amp;b)</span> </span>&#123;<br>    <span class="hljs-type">int</span> temp = a;<br>    a = b;<br>    b = temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">partition</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    a = l, b = r;<br>    <span class="hljs-type">int</span> i = l;<br>    <span class="hljs-keyword">while</span> (i &lt;= b) &#123;<br>        <span class="hljs-keyword">if</span> (arr[i] &lt; arr[x]) &#123;<br>            <span class="hljs-built_in">swap</span>(arr[a], arr[i]);<br>            a++;<br>            i++;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[i] &gt; arr[x]) &#123;<br>            <span class="hljs-built_in">swap</span>(arr[b], arr[i]);<br>            b--;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            i++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quicksort</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt; r) &#123;<br>        <span class="hljs-type">int</span> x = l + <span class="hljs-built_in">rand</span>() % (r - l + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">partition</span>(l, x, r);<br>        <span class="hljs-type">int</span> left = a, right = b;<br>        <span class="hljs-built_in">quicksort</span>(l, left - <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">quicksort</span>(right + <span class="hljs-number">1</span>, r);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">srand</span>(<span class="hljs-built_in">time</span>(<span class="hljs-number">0</span>)); <span class="hljs-comment">// 初始化随机数生成器</span><br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    arr.<span class="hljs-built_in">resize</span>(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cin &gt;&gt; arr[i];<br>    &#125;<br>    <span class="hljs-built_in">quicksort</span>(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cout &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>第二种<br>cpp代码实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctime&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; arr;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a, <span class="hljs-type">int</span> &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> temp = a;<br>    a = b;<br>    b = temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">partition</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> &amp;a, <span class="hljs-type">int</span> &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 随机选择一个基准值，并将其与第一个元素交换</span><br>    <span class="hljs-type">int</span> randomIndex = l + <span class="hljs-built_in">rand</span>() % (r - l + <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">swap</span>(arr[l], arr[randomIndex]);<br>    <span class="hljs-type">int</span> pivot = arr[l];<br>    a = l;<br>    b = r;<br>    <span class="hljs-type">int</span> i = l;<br>    <span class="hljs-keyword">while</span> (i &lt;= b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (arr[i] &lt; pivot)<br>        &#123;<br>            <span class="hljs-built_in">swap</span>(arr[a], arr[i]);<br>            a++;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[i] &gt; pivot)<br>        &#123;<br>            <span class="hljs-built_in">swap</span>(arr[b], arr[i]);<br>            b--;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            i++;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quicksort</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> a, b;<br>    <span class="hljs-built_in">partition</span>(l, r, a, b);<br>    <span class="hljs-built_in">quicksort</span>(l, a - <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">quicksort</span>(b + <span class="hljs-number">1</span>, r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">srand</span>(<span class="hljs-built_in">time</span>(<span class="hljs-number">0</span>));<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    arr.<span class="hljs-built_in">resize</span>(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cin &gt;&gt; arr[i];<br>    &#125;<br><br>    <span class="hljs-built_in">quicksort</span>(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cout &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="随机选择算法"><a href="#随机选择算法" class="headerlink" title="随机选择算法"></a>随机选择算法</h3><p>常见算法<br>随机快排做划分，查看左边界，右边界与所求第x大数之间的关系，另两部分直接舍去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java">pulic <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findKthLargest</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k)</span>&#123;<br>    <span class="hljs-keyword">return</span> randomizedSelect(nums, nums.length - k);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">randomizedSelect</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> =<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = arr.length-<span class="hljs-number">1</span>; l &lt;= r;)&#123;<br>        partition(arr, l, r, arr[l + (<span class="hljs-type">int</span>)(Math.random()*(r - l + <span class="hljs-number">1</span>))]);<br>        <span class="hljs-keyword">if</span> (i &lt; a)&#123;<br>            r= first - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i &gt; b)&#123;<br>            l = last + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            ans = arr[i];<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> a, b;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">partition2</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> l, b = r, i = l;<br>    <span class="hljs-keyword">while</span>(i &lt;= b)&#123;<br>        <span class="hljs-keyword">if</span>(arr[i] &lt;= x)&#123;<br>            swap(a,i);<br>            a++;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[i] == x)&#123;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            swap(i, b);<br>            b--;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>BFPRT算法</p><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapSort1</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> arr.length;<br>    <span class="hljs-comment">// 从上往下构造大根堆</span><br>    <span class="hljs-comment">//log1+log2+...+logn 收敛于O(n*logn)</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; n;i++)&#123;<br>        heapInsert1(arr, i);<br>    &#125;<br>    <span class="hljs-comment">// 从下往上构造大根堆</span><br>    <span class="hljs-comment">// for (int i = n-1; i &gt;= 0; i--)&#123;</span><br>    <span class="hljs-comment">//     heapInsert2(arr, i);</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> n;<br>    <span class="hljs-comment">//调整过程O(n*logn)</span><br>    <span class="hljs-keyword">while</span> (size &gt; <span class="hljs-number">1</span>)&#123;<br>        swap(arr, <span class="hljs-number">0</span>, --size);<br>        heapify(arr, <span class="hljs-number">0</span> ,size);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>cpp实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a, <span class="hljs-type">int</span> &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> temp = a;<br>    a = b;<br>    b = temp;<br>&#125;<br><br><span class="hljs-comment">// 新加入大根堆堆尾的数据向上调整</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapInsert1</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (arr[i] &gt; arr[(i - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>])<br>    &#123;<br>        <span class="hljs-built_in">swap</span>(arr[i], arr[(i - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>]);<br>        i = (i - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 从底往上构造大根堆，新入堆的值向下对比</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapInsert2</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> ((arr[i] &lt; arr[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] || arr[i] &lt; arr[i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>]) &amp;&amp; (i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt; n &amp;&amp; i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span> &lt; n))<br>    &#123;<br>        <span class="hljs-type">int</span> best = i;<br>        <span class="hljs-keyword">if</span> (arr[i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>] &lt; arr[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>])<br>        &#123;<br>            best = i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            best = i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-built_in">swap</span>(arr[i], arr[best]);<br>        i = best;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 向下调整，大根堆中i位置数值变了</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapify</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> largest = i;       <span class="hljs-comment">// 初始化 largest 为根节点</span><br>    <span class="hljs-type">int</span> left = <span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 左子节点</span><br>    <span class="hljs-type">int</span> right = <span class="hljs-number">2</span> * i + <span class="hljs-number">2</span>; <span class="hljs-comment">// 右子节点</span><br><br>    <span class="hljs-comment">// 如果左子节点大于根节点</span><br>    <span class="hljs-keyword">if</span> (left &lt; n &amp;&amp; arr[left] &gt; arr[largest])<br>        largest = left;<br><br>    <span class="hljs-comment">// 如果右子节点大于 largest</span><br>    <span class="hljs-keyword">if</span> (right &lt; n &amp;&amp; arr[right] &gt; arr[largest])<br>        largest = right;<br><br>    <span class="hljs-comment">// 如果 largest 不是根节点</span><br>    <span class="hljs-keyword">if</span> (largest != i)<br>    &#123;<br>        <span class="hljs-built_in">swap</span>(arr[i], arr[largest]);<br><br>        <span class="hljs-comment">// 递归地对受影响的子树进行 heapify</span><br>        <span class="hljs-built_in">heapify</span>(arr, n, largest);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapsort1</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">heapInsert1</span>(arr, i);<br>    &#125;<br>    <span class="hljs-type">int</span> size = n;<br>    <span class="hljs-keyword">while</span> (size &gt; <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">swap</span>(arr[<span class="hljs-number">0</span>], arr[--size]);<br>        <span class="hljs-built_in">heapify</span>(arr, size, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapsort2</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-built_in">heapInsert2</span>(arr, i, n);<br>    &#125;<br>    <span class="hljs-type">int</span> size = n;<br>    <span class="hljs-keyword">while</span> (size &gt; <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">swap</span>(arr[<span class="hljs-number">0</span>], arr[--size]);<br>        <span class="hljs-built_in">heapify</span>(arr, size, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> arr1[n], arr2[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cin &gt;&gt; arr1[i];<br>        arr2[i] = arr1[i];<br>    &#125;<br>    <span class="hljs-built_in">heapsort1</span>(arr1, n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cout &lt;&lt; arr1[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-built_in">heapsort2</span>(arr2, n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cout &lt;&lt; arr2[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">BASE</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAXN</span> <span class="hljs-operator">=</span> <span class="hljs-number">50001</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] help = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[MAXN];<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] cnts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[BASE];<br><br><br><span class="hljs-comment">//找到最小值，全部数减去最小值以确保所有数都是正数</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] sortArray(<span class="hljs-type">int</span>[] arr)&#123;<br>    <span class="hljs-keyword">if</span> (arr.length &gt; <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> arr.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; n; i++)&#123;<br>            min = Math.min(min, arr[i]);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            arr[i] -=min;<br>            max = Math.max(max, arr[i]);<br>        &#125;<br>        radixSort(arr, n, bits(max));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i&lt; n; i++)&#123;<br>            arr[i] += min;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">bits</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (number &gt; <span class="hljs-number">0</span>)&#123;<br>        ans++;<br>        number /=BASE;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-comment">//bits为arr数组中最大值在BASE进制时的位数</span><br><span class="hljs-comment">//arr保证没用负数</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">radixSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> bits)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; bits &gt; <span class="hljs-number">0</span>; offset *=BASE, bits--)&#123;<br>        Array.fill(cnts, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; n; i++)&#123;<br>            cnts[(arr[i]/offset)%BASE]++;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;BASE; i++)&#123;<br>            cnts[i] = cnts[i] + cnts[i-<span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>            help[--cnts[(arr[i] / offset)%BASE]] = arr[i];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            arr[i] = help[i];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>cpp实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; arr;<br>vector&lt;<span class="hljs-type">int</span>&gt; help;<br>vector&lt;<span class="hljs-type">int</span>&gt; cnts;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BASE 10</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bits</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span></span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (number &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        number = number / BASE;<br>        ans++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">radixSort</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> bits)</span></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> offset = <span class="hljs-number">1</span>;bits&gt;<span class="hljs-number">0</span>; offset*=BASE,bits--)<br>    &#123;<br>        <span class="hljs-built_in">fill</span>(cnts.<span class="hljs-built_in">begin</span>(), cnts.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            cnts[(arr[i]/offset)%BASE]++;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; BASE; i++)<br>        &#123;<br>            cnts[i]=cnts[i] + cnts[i<span class="hljs-number">-1</span>];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n<span class="hljs-number">-1</span>; i &gt;=<span class="hljs-number">0</span>; i--)<br>        &#123;<br>            help[--cnts[(arr[i]/offset)%BASE]] = arr[i];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            arr[i]=help[i];<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sortArray</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-type">int</span> min = arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>        &#123;<br>            min = std::<span class="hljs-built_in">min</span>(min, arr[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            arr[i] = arr[i] - min;<br>        &#125;<br>        <span class="hljs-type">int</span> max = arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>        &#123;<br>            max = std::<span class="hljs-built_in">max</span>(max, arr[i]);<br>        &#125;<br>        <span class="hljs-built_in">radixSort</span>(n, <span class="hljs-built_in">bits</span>(max));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            arr[i] = arr[i] + min;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    arr.<span class="hljs-built_in">resize</span>(n);<br>    help.<span class="hljs-built_in">resize</span>(n);<br>    cnts.<span class="hljs-built_in">resize</span>(BASE);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cin &gt;&gt; arr[i];<br>    &#125;<br>    <span class="hljs-built_in">sortArray</span>(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cout &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/%E9%87%8D%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E6%80%BB%E7%BB%932.png" alt="排序总结"></p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
      <category>408</category>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树及其实现</title>
    <link href="/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/"/>
    <url>/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="二叉树分析"><a href="#二叉树分析" class="headerlink" title="二叉树分析"></a>二叉树分析</h2><p><img src="../images/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%86%E6%9E%90.png" alt="二叉树分析"></p><h2 id="二叉树的递归遍历"><a href="#二叉树的递归遍历" class="headerlink" title="二叉树的递归遍历"></a>二叉树的递归遍历</h2><p>基础遍历：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(TreeNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//1</span><br>    f(head.left);<br>    <span class="hljs-comment">//2</span><br>    f(head.right);<br>    <span class="hljs-comment">//3</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="../images/%E4%BA%8C%E5%8F%89%E6%A0%91/%E9%80%92%E5%BD%92%E5%BA%8F.png" alt="递归序"></p><h3 id="三种排序"><a href="#三种排序" class="headerlink" title="三种排序"></a>三种排序</h3><p>1.前&#x2F;先序排列 <em><strong>二叉树内元素第一次时出现记录</strong></em><br>中-&gt;左-&gt;右</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrder</span><span class="hljs-params">(TreeNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    System.out.print(head.data + <span class="hljs-string">&quot; &quot;</span>);<br>    preOrder(head.left);<br>    preOrder(head.right);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.中序排列 <em><strong>二叉树内元素第二次时出现记录</strong></em><br>左-&gt;中-&gt;右</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inOrder</span><span class="hljs-params">(TreeNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    inOrder(head.left);<br>    System.out.print(head.data + <span class="hljs-string">&quot; &quot;</span>);<br>    inOrder(head.right);<br>&#125;<br></code></pre></td></tr></table></figure><p>3.后序排列 <em><strong>二叉树内元素第三次时出现记录</strong></em><br>左-&gt;右-&gt;中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postOrder</span><span class="hljs-params">(TreeNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    postOrder(head.left);<br>    postOrder(head.right);<br>    System.out.print(head.data + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二叉树的非递归遍历-迭代-用栈实现"><a href="#二叉树的非递归遍历-迭代-用栈实现" class="headerlink" title="二叉树的非递归遍历_迭代_用栈实现"></a>二叉树的非递归遍历_迭代_用栈实现</h2><p>1.先序遍历：  <em><strong>先压头，弹出的变头，先压右再压左，弹出时就是先弹左节点先处理左子树，先左再右</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOder</span><span class="hljs-params">(TreeNode head)</span>&#123;<br>    <span class="hljs-keyword">if</span>(head !=<span class="hljs-literal">null</span>)&#123;<br>        Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        stack.push(head);<br>        <span class="hljs-keyword">while</span>(!stack.isEmpty())&#123;<br>            head = stack.pop();<br>            System.out.println(head.val);<br>            <span class="hljs-keyword">if</span>(head.right != <span class="hljs-literal">null</span>)&#123;<br>                stack.push(head.right);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(head.left != <span class="hljs-literal">null</span>)&#123;<br>                stack.push(head.left);<br>            &#125;<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.中序遍历： <em><strong>头不为空，先压头，再以左节点为头，压入整棵树的左节点；头为空，弹出父节点并打印，以父节点的右节点为头，再处理右子树的全部左节点</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inOrder</span><span class="hljs-params">(TreeNode head)</span>&#123;<br>    <span class="hljs-keyword">if</span>(head !=<span class="hljs-literal">null</span>)&#123;<br>        Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        <span class="hljs-keyword">while</span>(!stack.isEmpty() || head != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(head != <span class="hljs-literal">null</span>)&#123;<br>                stack.push(head);<br>                head = head.left;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                head = stack.pop();<br>                System.out.println(head.val);<br>                head = head.right;<br>            &#125;<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.后序排列：<br>①两个栈实现：<em><strong>先通过类前序变为中-&gt;右—&gt;左，在通过压栈出栈变为左-&gt;右-&gt;中</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">posOrderTwoStacks</span><span class="hljs-params">(TreeNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head != <span class="hljs-literal">null</span>) &#123;<br>        Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        Stack&lt;TreeNode&gt; collect = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        stack.push(head);<br>        <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>            head = stack.pop();<br>            collect.push(head);<br>            <span class="hljs-keyword">if</span> (head.left != <span class="hljs-literal">null</span>) &#123;<br>                stack.push(head.left);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (head.right != <span class="hljs-literal">null</span>) &#123;<br>                stack.push(head.right);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (!collect.isEmpty()) &#123;<br>            System.out.print(collect.pop().val + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>②一个栈实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">posOrderOneStack</span><span class="hljs-params">(TreeNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head!=<span class="hljs-literal">null</span>)&#123;<br>        Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        stack.push(head);<br>        <span class="hljs-keyword">while</span> (!stack.isEmpty())&#123;<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> stack.peek();<br>            <span class="hljs-comment">//有左子树且左子树未处理</span><br>            <span class="hljs-keyword">if</span> (cur.left!=<span class="hljs-literal">null</span>&amp;&amp;head!=cur.left&amp;&amp;head!=cur.right)&#123;<br>                stack.push(cur.left);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur.right!=<span class="hljs-literal">null</span>&amp;&amp;head!=cur.right)&#123;<br>            <span class="hljs-comment">//有右子树且右子树未处理</span><br>                stack.push(cur.right);<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//为叶子节点或者左右子树都处理过了</span><br>                System.out.print(cur.val);<br>                head = stack.pop();<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
      <category>408</category>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>树</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
