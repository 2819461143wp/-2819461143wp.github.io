<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据结构与算法———重要排序算法</title>
    <link href="/2024/08/14/%E9%87%8D%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/2024/08/14/%E9%87%8D%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h3 id="递归与master公式"><a href="#递归与master公式" class="headerlink" title="递归与master公式"></a>递归与master公式</h3><p><img src="/../images/%E9%80%92%E5%BD%92%E7%90%86%E8%A7%A3%E4%B8%8Emaster%E5%85%AC%E5%BC%8F.png" alt="递归理解与master公式"></p><h3 id="递归寻找最大值"><a href="#递归寻找最大值" class="headerlink" title="递归寻找最大值"></a>递归寻找最大值</h3><p><img src="/../images/%E9%80%92%E5%BD%92%E5%AF%BB%E6%89%BE%E6%9C%80%E5%A4%A7%E5%80%BC.png" alt="递归寻找最大值"></p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并分治思想：将一个问题尝试分为若干个类似问题，解决单个问题后再解决合一起的问题</p><p>例：整体有序&#x3D;左有序+右有序+合起来有序</p><h3 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h3><p>递归实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">501</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[MAXN];<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] help = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[MAXN];<br><span class="hljs-comment">//T(n)=2*T(n/2)+O(n)</span><br><span class="hljs-comment">//master可得时间复杂度为O(n*log(n))</span><br><span class="hljs-comment">//空间复杂度为O(n)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mergeSort1</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-keyword">if</span>(l == r)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (l+r)/<span class="hljs-number">2</span>;<br>    mergeSort1(l,m);<br>    mergeSort1(m+<span class="hljs-number">1</span>,r);<br>    merge(l,m,r);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> m,<span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> l;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> l;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span>m+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (a &lt;=m &amp;&amp; b &lt;= r)&#123;<br>        <span class="hljs-keyword">if</span>(arr[a] &lt;= arr[b])&#123;<br>            help[i++] = arr[a++];<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            help[i++] = arr[b++];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (a &lt;= m)&#123;<br>        help[i++] = arr[a++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (b &lt;=r )&#123;<br>        help[i++] = arr[b++];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = l; i &lt;= r; i++)&#123;<br>        arr&#123;i&#125; = help[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>非递归实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">501</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[MAXN];<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] help = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[MAXN];<br><span class="hljs-comment">//时间复杂度为O(n*log(n))</span><br><span class="hljs-comment">//空间复杂度为O(n)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mergeSort2</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l, m, r, step = <span class="hljs-number">1</span>; step &lt; n; step &lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>        l = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(l &lt; n)&#123;<br>            m = l + step -<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (m + <span class="hljs-number">1</span> &gt;= n)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            r = Math.min(l + (step &lt;&lt; <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>);<br>            merge(l, m, r);<br>            l = r + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> m,<span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> l;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> l;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span>m+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (a &lt;=m &amp;&amp; b &lt;= r)&#123;<br>        <span class="hljs-keyword">if</span>(arr[a] &lt;= arr[b])&#123;<br>            help[i++] = arr[a++];<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            help[i++] = arr[b++];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (a &lt;= m)&#123;<br>        help[i++] = arr[a++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (b &lt;=r )&#123;<br>        help[i++] = arr[b++];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = l; i &lt;= r; i++)&#123;<br>        arr&#123;i&#125; = help[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="归并分治"><a href="#归并分治" class="headerlink" title="归并分治"></a>归并分治</h3><p>求数组小和问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">501</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[MAXN];<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] help = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[MAXN];<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">smallSum</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-keyword">if</span>(l == r)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (l+r) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">return</span> smallSum(l, m)+smallSum(m+<span class="hljs-number">1</span>, r) + merge(l, m, r);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> m+<span class="hljs-number">1</span>, i = l, sum = <span class="hljs-number">0</span>;j &lt;= r; j++)&#123;<br>        <span class="hljs-keyword">while</span> (i &lt;= m &amp;&amp; arr[i] &lt; arr[j])&#123;<br>            sum += arr[i++];<br>        &#125;<br>        ans += sum;<br>    &#125;<span class="hljs-comment">//可将这一部分加到左右两端比较大小放入辅助数组那里</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> l;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> l;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span>m+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (a &lt;=m &amp;&amp; b &lt;= r)&#123;<br>        <span class="hljs-keyword">if</span>(arr[a] &lt;= arr[b])&#123;<br>            help[i++] = arr[a++];<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            help[i++] = arr[b++];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (a &lt;= m)&#123;<br>        help[i++] = arr[a++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (b &lt;= r)&#123;<br>        help[i++] = arr[b++];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = l; i &lt;= r; i++)&#123;<br>        arr&#123;i&#125; = help[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 归并排序的一部分，同时计算小和</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> temp[], <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> mid, <span class="hljs-type">int</span> right)</span> </span>&#123;<br>    <span class="hljs-type">int</span> i = left, j = mid + <span class="hljs-number">1</span>, k = left;<br>    <span class="hljs-type">int</span> smallSum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;<br>        <span class="hljs-keyword">if</span> (arr[i] &lt; arr[j]) &#123;<br>            <span class="hljs-comment">// 当左侧元素小于右侧元素时，计算小和</span><br>            smallSum += (arr[i] * (right - j + <span class="hljs-number">1</span>));<br>            temp[k++] = arr[i++];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            temp[k++] = arr[j++];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid) &#123;<br>        temp[k++] = arr[i++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (j &lt;= right) &#123;<br>        temp[k++] = arr[j++];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = left; i &lt;= right; i++) &#123;<br>        arr[i] = temp[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> smallSum;<br>&#125;<br><br><span class="hljs-comment">// 使用归并排序的方法计算小和</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mergeSortAndCount</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> temp[], <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> </span>&#123;<br>    <span class="hljs-type">int</span> mid, smallSum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (right &gt; left) &#123;<br>        mid = (right + left) / <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">// 分治法：先处理左半部分，再处理右半部分</span><br>        smallSum += <span class="hljs-built_in">mergeSortAndCount</span>(arr, temp, left, mid);<br>        smallSum += <span class="hljs-built_in">mergeSortAndCount</span>(arr, temp, mid + <span class="hljs-number">1</span>, right);<br>        <span class="hljs-comment">// 合并两个有序部分，并计算小和</span><br>        smallSum += <span class="hljs-built_in">merge</span>(arr, temp, left, mid, right);<br>    &#125;<br>    <span class="hljs-keyword">return</span> smallSum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> arr[n];<br>    <span class="hljs-type">int</span> temp[n]; <span class="hljs-comment">// 用于归并排序的临时数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cin &gt;&gt; arr[i];<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;数组小和为: &quot;</span> &lt;&lt; <span class="hljs-built_in">mergeSortAndCount</span>(arr, temp, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>反转对数列</p><h2 id="随机快速排序"><a href="#随机快速排序" class="headerlink" title="随机快速排序"></a>随机快速排序</h2><h3 id="随机快速排序经典过程-不推荐"><a href="#随机快速排序经典过程-不推荐" class="headerlink" title="随机快速排序经典过程(不推荐)"></a>随机快速排序经典过程(不推荐)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort1</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-keyword">if</span>(l &gt;= r)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> arr[l+(<span class="hljs-type">int</span>)(Math.random()*(r-l+<span class="hljs-number">1</span>))];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> partition1(l, r, x);<br>    quickSort1(l,mid-<span class="hljs-number">1</span>);<br>    quickSort1(mid+<span class="hljs-number">1</span>, r);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">partition1</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> l, xi =<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> l; i &lt;= r; i++)&#123;<br>        <span class="hljs-keyword">if</span>(arr[i] &lt;= x)&#123;<br>            swap(a, i);<span class="hljs-comment">//交换两个索引的值</span><br>            <span class="hljs-keyword">if</span> (arr[a] == x)&#123;<br>                xi = a;<span class="hljs-comment">//记录最后一个等于划分值的索引</span><br>            &#125;<br>            a++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//l,....,x,.....a-1,a,...</span><br>    <span class="hljs-comment">//l~a-1 &lt;=x   a~r &gt;x</span><br>    swap(xi, a - <span class="hljs-number">1</span>);<span class="hljs-comment">//将该值换到中间a-1去</span><br>    <span class="hljs-keyword">return</span> a - <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="荷兰国旗划分问题"><a href="#荷兰国旗划分问题" class="headerlink" title="荷兰国旗划分问题"></a>荷兰国旗划分问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//期望的时间复杂度为O(n*logn),空间复杂度为O(logn)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort2</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-keyword">if</span>(l &gt;= r)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> arr[l+(<span class="hljs-type">int</span>)(Math.random()*(r-l+<span class="hljs-number">1</span>))];<br>    partition2(l, r, x);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> a;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> b;<br>    quickSort2(l, left-<span class="hljs-number">1</span>);<br>    quickSort2(right+<span class="hljs-number">1</span> ,r);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> a, b;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">partition2</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> l, b = r, i = l;<br>    <span class="hljs-keyword">while</span>(i &lt;= b)&#123;<br>        <span class="hljs-keyword">if</span>(arr[i] &lt;= x)&#123;<br>            swap(a,i);<br>            a++;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[i] == x)&#123;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            swap(i, b);<br>            b--;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="随机选择算法"><a href="#随机选择算法" class="headerlink" title="随机选择算法"></a>随机选择算法</h3><p>常见算法<br>随机快排做划分，查看左边界，右边界与所求第x大数之间的关系，另两部分直接舍去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java">pulic <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findKthLargest</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k)</span>&#123;<br>    <span class="hljs-keyword">return</span> randomizedSelect(nums, nums.length - k);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">randomizedSelect</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> =<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = arr.length-<span class="hljs-number">1</span>; l &lt;= r;)&#123;<br>        partition(arr, l, r, arr[l + (<span class="hljs-type">int</span>)(Math.random()*(r - l + <span class="hljs-number">1</span>))]);<br>        <span class="hljs-keyword">if</span> (i &lt; a)&#123;<br>            r= first - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i &gt; b)&#123;<br>            l = last + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            ans = arr[i];<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> a, b;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">partition2</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> l, b = r, i = l;<br>    <span class="hljs-keyword">while</span>(i &lt;= b)&#123;<br>        <span class="hljs-keyword">if</span>(arr[i] &lt;= x)&#123;<br>            swap(a,i);<br>            a++;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[i] == x)&#123;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            swap(i, b);<br>            b--;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>BFPRT算法</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构与算法————堆</title>
    <link href="/2024/08/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E5%A0%86/"/>
    <url>/2024/08/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E5%A0%86/</url>
    
    <content type="html"><![CDATA[<h2 id="堆结构-优先级队列"><a href="#堆结构-优先级队列" class="headerlink" title="堆结构,优先级队列"></a>堆结构,优先级队列</h2><p><img src="/../images/%E6%95%B0%E7%BB%84%E5%89%8D%E7%BC%80%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E5%85%AC%E5%BC%8F.png" alt="数组前缀完全二叉树公式"></p><p>大根堆（最大堆）是一种特殊的二叉树结构，它满足以下两个条件：</p><ul><li>完全二叉树：大根堆是一棵完全二叉树，即除了最后一层外，每一层的节点都是满的，并且最后一层的节点从左到右依次排列。</li><li>堆序性质：大根堆中每个节点的值都大于或等于其子节点的值。换句话说，根节点是整个堆中的最大值。</li></ul><h3 id="调整代码"><a href="#调整代码" class="headerlink" title="调整代码"></a>调整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//新加入大根堆堆尾的数据向上调整</span><br><span class="hljs-comment">//从上往下构造大根堆</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapInsert1</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">while</span> (arr[i] &gt; arr[(i-<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>])&#123;<br>        swap(aar, i, (i_1)/<span class="hljs-number">2</span>)<br>        i = (i-<span class="hljs-number">1</span>)/<span class="hljs-number">2</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//从底往上构造大根堆，新的数往下对比</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapInsert2</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">while</span> (arr[i] &lt; arr[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] || arr[i] &lt; arr[i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>])&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">best</span> <span class="hljs-operator">=</span> i;<br>        <span class="hljs-keyword">if</span> (arr[i * <span class="hljs-number">2</span> +<span class="hljs-number">1</span>] &lt; arr[i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>])&#123;<br>            best = i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            best = i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>        &#125;<br>        swap(arr, i, best);<br>        i = best;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//往下调整,大根堆中i位置数值变了</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapify</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> size)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> i * <span class="hljs-number">2</span> +<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (l &lt; size)&#123;<br>        <span class="hljs-type">int</span> best;<br>        <span class="hljs-keyword">if</span>(l + <span class="hljs-number">1</span> &lt; size &amp;&amp; arr[l + <span class="hljs-number">1</span>] &gt; arr[l])&#123;<br>            best = l + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            best = l;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (arr[best] &lt; arr[i])&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        swap(arr, best, i);<br>        i = best;<br>        l = i * <span class="hljs-number">2</span> +<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapSort1</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> arr.length;<br>    <span class="hljs-comment">// 从上往下构造大根堆</span><br>    <span class="hljs-comment">//log1+log2+...+logn 收敛于O(n*logn)</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; n;i++)&#123;<br>        heapInsert1(arr, i);<br>    &#125;<br>    <span class="hljs-comment">// 从下往上构造大根堆</span><br>    <span class="hljs-comment">// for (int i = n-1; i &gt;= 0; i--)&#123;</span><br>    <span class="hljs-comment">//     heapInsert2(arr, i);</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> n;<br>    <span class="hljs-comment">//调整过程O(n*logn)</span><br>    <span class="hljs-keyword">while</span> (size &gt; <span class="hljs-number">1</span>)&#123;<br>        swap(arr, <span class="hljs-number">0</span>, --size);<br>        heapify(arr, <span class="hljs-number">0</span> ,size);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="比较器定制"><a href="#比较器定制" class="headerlink" title="比较器定制"></a>比较器定制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> company;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(<span class="hljs-type">int</span> c, <span class="hljs-type">int</span> a)</span>&#123;<br>        company = c;<br>        age = a;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> EmployeeComparator <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;Employee&gt;&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Employee <span class="hljs-number">01</span>, Employee o2)</span>&#123;<br>        <span class="hljs-comment">//返回正数o1优先级高，返回负数o2优先级高，优先级一致返回0</span><br>        <span class="hljs-keyword">return</span> o1.age - o2.age;<br>    &#125;<br>&#125;<br><br>Employee []arr=&#123;&#125;;<br>Array.sort(arr,<span class="hljs-keyword">new</span> <span class="hljs-title class_">EmployeeComparator</span>());<br>Array.sort(arr,(a,b)-&gt;b.age-a.age);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
